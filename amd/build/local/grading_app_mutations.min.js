define("mod_competvet/local/grading_app_mutations",["exports","core/sessionstorage","core/notification","core/ajax"],(function(_exports,Storage,_notification,_ajax){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.GradingAppMutations=void 0,Storage=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Storage),_notification=_interopRequireDefault(_notification),_ajax=_interopRequireDefault(_ajax);class GradingAppMutations{async filtersToggle(stateManager){const state=stateManager.state;stateManager.setReadOnly(!1),state.info.filterShow=!state.info.filterShow,stateManager.setReadOnly(!0)}async currentUserChange(stateManager,direction){const state=stateManager.state,userList=state.users.toJSON(),currentUserId=state.currentUser?state.currentUser.id:0,index=userList.findIndex((user=>user.id===currentUserId));if(-1===index)return;let nextIndex=index;"next"===direction?(nextIndex++,nextIndex>=userList.length&&(nextIndex=0)):(nextIndex--,nextIndex<0&&(nextIndex=userList.length-1));const nextUser=userList[nextIndex];stateManager.setReadOnly(!1),state.currentUser={...nextUser},state.plannings=await this.getPlanningsForUser(state.info.cmId,state.currentUser.id),GradingAppMutations.setCurrentUserId(nextUser.id,state.info.cmId),stateManager.setReadOnly(!0)}async planningChange(stateManager,direction){const state=stateManager.state,planningList=state.plannings.toJSON(),currentplanningId=state.currentPlanning?state.currentPlanning.id:0,index=planningList.findIndex((planning=>planning.id===currentplanningId));if(-1===index)return;let nextIndex=index;"next"===direction?(nextIndex++,nextIndex>=planningList.length&&(nextIndex=0)):(nextIndex--,nextIndex<0&&(nextIndex=planningList.length-1));const nextPlanning=planningList[nextIndex];stateManager.setReadOnly(!1),state.currentPlanning={...nextPlanning},GradingAppMutations.setCurrentPlanningId(nextPlanning.id,state.info.cmId),stateManager.setReadOnly(!0)}async updateSituationList(stateManager){const state=stateManager.state;stateManager.setReadOnly(!1),state.plannings=await this.getPlanningsForUser(state.cmId,state.currentUser.id),stateManager.setReadOnly(!0)}async initUserList(stateManager){const state=stateManager.state,cmId=state.info.cmId;stateManager.setReadOnly(!1);const userList=await this.getUserListState(cmId,"student");state.users=[],state.users.loadValues(userList);let currentUserId=GradingAppMutations.getCurrentUserId(cmId);currentUserId||(currentUserId=0,userList.length>0&&(currentUserId=userList[0].id,GradingAppMutations.setCurrentUserId(currentUserId,cmId))),state.currentUser={...userList.find((user=>user.id===currentUserId))},stateManager.setReadOnly(!0)}async initUserSituationInfo(stateManager){const state=stateManager.state,cmId=state.info.cmId;stateManager.setReadOnly(!1),state.plannings=await this.getPlanningsForUser(cmId,state.currentUser.id),stateManager.setReadOnly(!0)}static setCurrentUserId(userId,cmId){const storageKey="competvet/grading/".concat(cmId,"/userList");Storage.set(storageKey,userId)}static getCurrentUserId(cmId){const storageKey="competvet/grading/".concat(cmId,"/userList");return Storage.get(storageKey)}async getUserListState(cmId,roleArchetype){try{const{users:userList}=await _ajax.default.call([{methodname:"mod_competvet_get_user_list",args:{cmid:cmId,roletype:roleArchetype}}])[0];return userList}catch(error){return await _notification.default.exception(error),[]}}async getPlanningsForUser(cmId,userId){try{const{plannings:planningList}=await _ajax.default.call([{methodname:"mod_competvet_get_situation_planning_info",args:{cmid:cmId,userid:userId}}])[0];return planningList}catch(error){return await _notification.default.exception(error),{}}}}_exports.GradingAppMutations=GradingAppMutations}));

//# sourceMappingURL=grading_app_mutations.min.js.map