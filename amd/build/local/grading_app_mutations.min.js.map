{"version":3,"file":"grading_app_mutations.min.js","sources":["../../src/local/grading_app_mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\nimport * as Storage from 'core/sessionstorage';\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n */\nexport class GradingAppMutations {\n    /**\n     * Filter Toggle\n     *\n     * @param {StateManager} stateManager\n     **/\n    async filtersToggle(stateManager) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.info.filterShow = !state.info.filterShow;\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Current User changed mutation\n     *\n     * @param {StateManager} stateManager\n     * @param {string} direction\n     * @return {Promise<void>}\n     */\n    async currentUserChange(stateManager, direction) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        const userList = state.users.toJSON(); // This is a list of users.\n        // Find the next user in userList and set it as current user.\n        const currentUserId = state.currentUser ? state.currentUser.id : 0;\n        const index = userList.findIndex((user) => user.id === currentUserId);\n        if (index === -1) {\n            return;\n        }\n        let nextIndex = index;\n        if (direction === 'next') {\n            nextIndex++;\n            if (nextIndex >= userList.length) {\n                nextIndex = 0;\n            }\n        } else {\n            nextIndex--;\n            if (nextIndex < 0) {\n                nextIndex = userList.length - 1;\n            }\n        }\n        const nextUser = userList[nextIndex];\n        stateManager.setReadOnly(false);\n        state.currentUser = {...nextUser};\n        state.plannings = await this.getPlanningsForUser(state.info.cmId, state.currentUser.id);\n        GradingAppMutations.setCurrentUserId(nextUser.id, state.info.cmId);\n        stateManager.setReadOnly(true);\n    }\n    /**\n     * Current User change mutation\n     *\n     * @param {StateManager} stateManager\n     * @param {string} direction\n     * @return {Promise<void>}\n     */\n    async planningChange(stateManager, direction) {\n        const state = stateManager.state;\n        const planningList = state.plannings.toJSON(); // This is a list of users.\n        // Find the next user in userList and set it as current user.\n        const currentplanningId = state.currentPlanning ? state.currentPlanning.id : 0;\n        const index = planningList.findIndex((planning) => planning.id === currentplanningId);\n        if (index === -1) {\n            return;\n        }\n        let nextIndex = index;\n        if (direction === 'next') {\n            nextIndex++;\n            if (nextIndex >= planningList.length) {\n                nextIndex = 0;\n            }\n        } else {\n            nextIndex--;\n            if (nextIndex < 0) {\n                nextIndex = planningList.length - 1;\n            }\n        }\n        const nextPlanning = planningList[nextIndex];\n        stateManager.setReadOnly(false);\n        state.currentPlanning = {...nextPlanning};\n        GradingAppMutations.setCurrentPlanningId(nextPlanning.id, state.info.cmId);\n        stateManager.setReadOnly(true);\n    }\n    /**\n     * Filter Toggle\n     *\n     * @param {StateManager} stateManager\n     **/\n    async updateSituationList(stateManager) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.plannings = await this.getPlanningsForUser(state.cmId, state.currentUser.id);\n        stateManager.setReadOnly(true);\n    }\n\n\n    /**\n     * Init current user and userList\n     *\n     * @param {StateManager} stateManager\n     **/\n    async initUserList(stateManager) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        const cmId = state.info.cmId;\n        stateManager.setReadOnly(false);\n        // Init the user list.\n        const userList = await this.getUserListState(cmId, 'student');\n        state.users = [];\n        state.users.loadValues(userList);\n        let currentUserId = GradingAppMutations.getCurrentUserId(cmId);\n        if (!currentUserId) {\n            currentUserId = 0;\n            if (userList.length > 0) {\n                currentUserId = userList[0].id;\n                GradingAppMutations.setCurrentUserId(currentUserId, cmId);\n            }\n        }\n        state.currentUser = {...userList.find((user) => user.id === currentUserId)};\n        stateManager.setReadOnly(true);\n    }\n\n    async initUserSituationInfo(stateManager) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        const cmId = state.info.cmId;\n        stateManager.setReadOnly(false);\n        state.plannings = await this.getPlanningsForUser(cmId, state.currentUser.id);\n        stateManager.setReadOnly(true);\n    }\n    /**\n     * Set the current user in the storage.\n     * @param {number} userId\n     * @param {number} cmId\n     */\n    static setCurrentUserId(userId, cmId) {\n        const storageKey = `competvet/grading/${cmId}/userList`;\n        Storage.set(storageKey, userId);\n    }\n\n    /**\n     * Get the current user from the storage.\n     * @param {number} cmId\n     * @return {number|null}\n     */\n    static getCurrentUserId(cmId) {\n        const storageKey = `competvet/grading/${cmId}/userList`;\n        return Storage.get(storageKey);\n    }\n\n    /**\n     * Set up the user list\n     *\n     * This is called after we build the reactive instance to fill\n     * the state with the initial data.\n     *\n     * @param {number} cmId cmid of the current course module\n     * @param {string} roleArchetype role (student or teachers)\n     */\n    async getUserListState(cmId, roleArchetype) {\n        try {\n            const {users: userList} = await Ajax.call([{\n                methodname: 'mod_competvet_get_user_list',\n                args: {\n                    cmid: cmId,\n                    roletype: roleArchetype\n                }\n            }])[0];\n            return userList;\n        } catch (error) {\n            await Notification.exception(error);\n            return [];\n        }\n    }\n\n    /**\n     * Get the situation List for current User\n     *\n     * @param {number} cmId cmid of the current course module\n     * @param {number} userId role (student or teachers)\n     */\n    async getPlanningsForUser(cmId, userId) {\n        try {\n            const {plannings: planningList} = await Ajax.call([{\n                methodname: 'mod_competvet_get_situation_planning_info',\n                args: {\n                    cmid: cmId,\n                    userid: userId\n                }\n            }])[0];\n\n            return planningList;\n        } catch (error) {\n            await Notification.exception(error);\n            return {};\n        }\n    }\n}\n"],"names":["GradingAppMutations","stateManager","state","setReadOnly","info","filterShow","direction","userList","users","toJSON","currentUserId","currentUser","id","index","findIndex","user","nextIndex","length","nextUser","plannings","this","getPlanningsForUser","cmId","setCurrentUserId","planningList","currentplanningId","currentPlanning","planning","nextPlanning","setCurrentPlanningId","getUserListState","loadValues","getCurrentUserId","find","userId","storageKey","Storage","set","get","roleArchetype","Ajax","call","methodname","args","cmid","roletype","error","Notification","exception","userid"],"mappings":"k2CAsBaA,wCAMWC,oBAEVC,MAAQD,aAAaC,MAC3BD,aAAaE,aAAY,GACzBD,MAAME,KAAKC,YAAcH,MAAME,KAAKC,WACpCJ,aAAaE,aAAY,2BAULF,aAAcK,iBAE5BJ,MAAQD,aAAaC,MACrBK,SAAWL,MAAMM,MAAMC,SAEvBC,cAAgBR,MAAMS,YAAcT,MAAMS,YAAYC,GAAK,EAC3DC,MAAQN,SAASO,WAAWC,MAASA,KAAKH,KAAOF,oBACxC,IAAXG,iBAGAG,UAAYH,MACE,SAAdP,WACAU,YACIA,WAAaT,SAASU,SACtBD,UAAY,KAGhBA,YACIA,UAAY,IACZA,UAAYT,SAASU,OAAS,UAGhCC,SAAWX,SAASS,WAC1Bf,aAAaE,aAAY,GACzBD,MAAMS,YAAc,IAAIO,UACxBhB,MAAMiB,gBAAkBC,KAAKC,oBAAoBnB,MAAME,KAAKkB,KAAMpB,MAAMS,YAAYC,IACpFZ,oBAAoBuB,iBAAiBL,SAASN,GAAIV,MAAME,KAAKkB,MAC7DrB,aAAaE,aAAY,wBASRF,aAAcK,iBACzBJ,MAAQD,aAAaC,MACrBsB,aAAetB,MAAMiB,UAAUV,SAE/BgB,kBAAoBvB,MAAMwB,gBAAkBxB,MAAMwB,gBAAgBd,GAAK,EACvEC,MAAQW,aAAaV,WAAWa,UAAaA,SAASf,KAAOa,wBACpD,IAAXZ,iBAGAG,UAAYH,MACE,SAAdP,WACAU,YACIA,WAAaQ,aAAaP,SAC1BD,UAAY,KAGhBA,YACIA,UAAY,IACZA,UAAYQ,aAAaP,OAAS,UAGpCW,aAAeJ,aAAaR,WAClCf,aAAaE,aAAY,GACzBD,MAAMwB,gBAAkB,IAAIE,cAC5B5B,oBAAoB6B,qBAAqBD,aAAahB,GAAIV,MAAME,KAAKkB,MACrErB,aAAaE,aAAY,6BAOHF,oBAEhBC,MAAQD,aAAaC,MAC3BD,aAAaE,aAAY,GACzBD,MAAMiB,gBAAkBC,KAAKC,oBAAoBnB,MAAMoB,KAAMpB,MAAMS,YAAYC,IAC/EX,aAAaE,aAAY,sBASVF,oBAETC,MAAQD,aAAaC,MACrBoB,KAAOpB,MAAME,KAAKkB,KACxBrB,aAAaE,aAAY,SAEnBI,eAAiBa,KAAKU,iBAAiBR,KAAM,WACnDpB,MAAMM,MAAQ,GACdN,MAAMM,MAAMuB,WAAWxB,cACnBG,cAAgBV,oBAAoBgC,iBAAiBV,MACpDZ,gBACDA,cAAgB,EACZH,SAASU,OAAS,IAClBP,cAAgBH,SAAS,GAAGK,GAC5BZ,oBAAoBuB,iBAAiBb,cAAeY,QAG5DpB,MAAMS,YAAc,IAAIJ,SAAS0B,MAAMlB,MAASA,KAAKH,KAAOF,iBAC5DT,aAAaE,aAAY,+BAGDF,oBAElBC,MAAQD,aAAaC,MACrBoB,KAAOpB,MAAME,KAAKkB,KACxBrB,aAAaE,aAAY,GACzBD,MAAMiB,gBAAkBC,KAAKC,oBAAoBC,KAAMpB,MAAMS,YAAYC,IACzEX,aAAaE,aAAY,2BAOL+B,OAAQZ,YACtBa,uCAAkCb,kBACxCc,QAAQC,IAAIF,WAAYD,gCAQJZ,YACda,uCAAkCb,yBACjCc,QAAQE,IAAIH,mCAYAb,KAAMiB,yBAEd/B,MAAOD,gBAAkBiC,cAAKC,KAAK,CAAC,CACvCC,WAAY,8BACZC,KAAM,CACFC,KAAMtB,KACNuB,SAAUN,kBAEd,UACGhC,SACT,MAAOuC,oBACCC,sBAAaC,UAAUF,OACtB,8BAUWxB,KAAMY,kBAEjBf,UAAWK,oBAAsBgB,cAAKC,KAAK,CAAC,CAC/CC,WAAY,4CACZC,KAAM,CACFC,KAAMtB,KACN2B,OAAQf,WAEZ,UAEGV,aACT,MAAOsB,oBACCC,sBAAaC,UAAUF,OACtB"}