{"version":3,"file":"grading_app_reactive.min.js","sources":["../../src/local/grading_app_reactive.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {Reactive} from 'core/reactive';\nimport {default as Events} from 'mod_competvet/local/events';\nimport {GradingAppMutations} from \"./grading_app_mutations\";\n\n\n/**\n * Main Grading App Reactive module.\n *\n * @module     mod_competvet/local/grading_app_reactive\n * @class     GradingAppReactive\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport class GradingAppReactive extends Reactive {\n    async initState(cmId) {\n        const initialState =\n            {\n                info: {\n                    cmId: cmId,\n                    filterShow: false,\n                },\n            };\n        this.setInitialState(initialState);\n    }\n}\n\n/**\n * All Grading app for each cmId\n * @type {*[]}\n */\nconst gradingAppMap = new Map();\n\n/**\n * GetGradingAppReactive for a given cmId\n *\n * @method getGradingAppReactive\n * @param {number} cmId cmid of the current course module\n */\nexport const getGradingAppReactive = (cmId) => {\n    if (!gradingAppMap.has(cmId)) {\n        const gradingApp = new GradingAppReactive({\n            name: 'GradingAppReactive',\n            eventDispatch: dispatchStateChangedEvent,\n            eventName: Events.gradingAppChanged,\n            mutations: new GradingAppMutations(),\n        });\n        gradingApp.initState(cmId);\n        gradingAppMap.set(cmId, gradingApp);\n    }\n    return gradingAppMap.get(cmId);\n};\n\n/**\n * Trigger a global state changed event.\n *\n * @method dispatchStateChangedEvent\n * @param {object} detail the full state\n * @param {object} target the custom event target (document if none provided)\n */\nconst dispatchStateChangedEvent = (detail, target) => {\n    if (target === undefined) {\n        target = document;\n    }\n    target.dispatchEvent(new CustomEvent(Events.gradingAppChanged, {\n        bubbles: true,\n        detail: detail,\n    }));\n};\n"],"names":["GradingAppReactive","Reactive","cmId","initialState","info","filterShow","setInitialState","gradingAppMap","Map","has","gradingApp","name","eventDispatch","dispatchStateChangedEvent","eventName","Events","gradingAppChanged","mutations","GradingAppMutations","initState","set","get","detail","target","undefined","document","dispatchEvent","CustomEvent","bubbles"],"mappings":";;;;;;;;6LA4BaA,2BAA2BC,mCACpBC,YACNC,aACF,CACIC,KAAM,CACFF,KAAMA,KACNG,YAAY,SAGnBC,gBAAgBH,oEAQvBI,cAAgB,IAAIC,mCAQYN,WAC7BK,cAAcE,IAAIP,MAAO,OACpBQ,WAAa,IAAIV,mBAAmB,CACtCW,KAAM,qBACNC,cAAeC,0BACfC,UAAWC,gBAAOC,kBAClBC,UAAW,IAAIC,6CAEnBR,WAAWS,UAAUjB,MACrBK,cAAca,IAAIlB,KAAMQ,mBAErBH,cAAcc,IAAInB,aAUvBW,0BAA4B,CAACS,OAAQC,eACxBC,IAAXD,SACAA,OAASE,UAEbF,OAAOG,cAAc,IAAIC,YAAYZ,gBAAOC,kBAAmB,CAC3DY,SAAS,EACTN,OAAQA"}