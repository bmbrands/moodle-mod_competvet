{"version":3,"file":"new-repository.min.js","sources":["../../src/local/new-repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * competvet repository.\n *\n * @module     mod_competvet/local/new-repository\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Competvet repository class.\n */\nclass Repository {\n\n    /**\n     * Get the User list.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getUserList(args) {\n        const request = {\n            methodname: 'mod_competvet_get_user_list',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get JSON data\n     * @param {Object} args The data to get.\n     * @return {Promise} The promise.\n     */\n    getJsonData(args) {\n        const request = {\n            methodname: 'mod_competvet_get_json',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the Competvet Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getCriteria(args) {\n        return Ajax.call([{methodname: 'mod_competvet_get_criteria', args: args}])[0];\n    }\n\n    /**\n     * Get the Evaluation Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getEvaluationCriteria(args) {\n        const file = await this.getJsonData({filename: 'evaluation-criteria'});\n        const storage = localStorage.getItem('evaluation-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid && args.cmid) {\n            data.userid = args.userid;\n            const storage = await this.getJsonData({filename: 'evaluation-criteria-' + args.userid + '-' + args.cmid});\n            if (!storage.data) {\n                return data.grids[0];\n            }\n            const userdata = JSON.parse(storage.data);\n            return userdata;\n        }\n        return data;\n    }\n\n    /**\n     * Get Certification Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getCertificationCriteria(args) {\n        const file = await this.getJsonData({filename: 'certification-criteria'});\n        const storage = localStorage.getItem('certification-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid && args.cmid) {\n            data.userid = args.userid;\n            // Here the backend should return the current grid including the user's grades.\n            // const storage = localStorage.getItem('certification-criteria-' + args.userid + '-' + args.cmid);\n            const storage = await this.getJsonData({filename: 'certification-criteria-' + args.userid + '-' + args.cmid});\n            if (!storage.data) {\n                return data.grids[0];\n            }\n            const userdata = JSON.parse(storage.data);\n\n            return userdata;\n        }\n        return data;\n    }\n\n    /**\n     * Get the Evaluation Grading\n     * @param {Object} args The grading to get.\n     * @return {Promise} The promise.\n     */\n    async getEvaluationGrading(args) {\n        const file = await this.getJsonData({filename: 'evaluation-grading'});\n        const storage = localStorage.getItem('evaluation-grading');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('evaluation-grading-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                evaluationsgrading: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Get the Certification Grading\n     * @param {Object} args The grading to get.\n     * @return {Promise} The promise.\n     */\n    async getCertificationGrading(args) {\n        const file = await this.getJsonData({filename: 'certification-grading'});\n        const storage = localStorage.getItem('certification-grading');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('certification-grading-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                certifgrading: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Get the global grade for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getGlobalGrade(args) {\n        const file = await this.getJsonData({filename: 'global-grade'});\n        const storage = localStorage.getItem('global-grade');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('global-grade-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                globalgrade: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Save the global grade.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveGlobalGrade(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('global-grade-' + data.userid, JSON.stringify(data));\n        // Return a promise with a 500ms delay.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the criteria.\n     * @param {Object} data The data to save.\n     */\n    async saveCriteria(data) {\n        return Ajax.call([{methodname: 'mod_competvet_manage_criteria', args: data}])[0];\n    }\n\n    /**\n     * Save the user grades for the list criteria.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('list-criteria-' + data.userid, JSON.stringify(data));\n        const promise = new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n        return promise;\n    }\n\n    /**\n     * Save the evaluation grading.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveEvaluationGrading(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('evaluation-grading-' + data.userid, JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the certification grading.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveCertificationGrading(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('certification-grading-' + data.userid, JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Get the user grades for the list criteria.\n     * @param {Object} data The data to get.\n     * @return {Promise} The promise.\n     */\n    async getListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        const storage = localStorage.getItem('list-criteria-' + data.userid);\n        if (storage) {\n            return JSON.parse(storage);\n        }\n    }\n\n    /**\n     * Get the Cases for the List Results.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getListResults(args) {\n        window.console.log('getListResults', args);\n        const file = await this.getJsonData({filename: 'list-results'});\n        const data = JSON.parse(file.data);\n        return data;\n    }\n\n    /**\n     * Get the Plannings data\n     * @param {Object} cmid The cmid to get.\n     * @return {Promise} The promise.\n     */\n    async getPlannings(cmid) {\n        const args = {\n            cmid,\n        };\n        return Ajax.call([{methodname: 'mod_competvet_get_plannings', args}])[0];\n    }\n}\n\nconst RepositoryInstance = new Repository();\n\nexport default RepositoryInstance;"],"names":["getUserList","args","request","methodname","promise","Ajax","call","fail","Notification","exception","getJsonData","file","this","filename","storage","localStorage","getItem","data","JSON","parse","userid","cmid","grids","evaluationsgrading","certifgrading","globalgrade","setItem","stringify","Promise","resolve","setTimeout","window","console","log"],"mappings":"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"}