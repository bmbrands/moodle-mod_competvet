{"version":3,"file":"new-repository.min.js","sources":["../../src/local/new-repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * competvet repository.\n *\n * @module     mod_competvet/local/grading2/repository\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * competvet repository class.\n */\nclass Repository {\n\n    /**\n     * Get the User list.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getUserList(args) {\n        const request = {\n            methodname: 'mod_competvet_get_user_list',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the Evaluations for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getEvaluations(args) {\n        const request = {\n            methodname: 'mod_competvet_get_evaluations',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the User Comments.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getUserComments(args) {\n\n        const request = {\n            methodname: 'mod_competvet_usercomments',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the Certification.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getCertification(args) {\n        const request = {\n            methodname: 'mod_competvet_certification',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n    /**\n     * Save the grade\n     * @param {Object} args The grade to save.\n     * @return {Promise} The promise.\n     */\n    saveGrade(args) {\n\n        const request = {\n            methodname: 'mod_competvet_grade',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get a comment\n     * @param {Object} args The comment to get.\n     * @return {Promise} The promise.\n     */\n    getComment(args) {\n        const request = {\n            methodname: 'mod_competvet_getcomment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Save a comment\n     * @param {Object} args The comment to save.\n     * @return {Promise} The promise.\n     */\n    saveComment(args) {\n        const request = {\n            methodname: 'mod_competvet_comment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete a comment\n     * @param {Object} args The comment to delete.\n     * @return {Promise} The promise.\n     */\n    deleteComment(args) {\n        const request = {\n            methodname: 'mod_competvet_deletecomment',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete the grade\n     * @param {Object} args The grade to delete.\n     * @return {Promise} The promise.\n     */\n    deleteGrade(args) {\n        const request = {\n            methodname: 'mod_competvet_deletegrade',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get JSON data\n     * @param {Object} args The data to get.\n     * @return {Promise} The promise.\n     */\n    getJsonData(args) {\n        const request = {\n            methodname: 'mod_competvet_get_json',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the List Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getListCriteria(args) {\n        const file = await this.getJsonData({filename: 'list-criteria'});\n        const storage = localStorage.getItem('list-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n\n            // Now get the user's grades.\n            const userGrades = await this.getListGrades(args);\n            if (userGrades) {\n                userGrades.criteria.forEach((grade) => {\n                    const criterion = data.grids[0].criteria.find((c) => c.criteriumid === grade.criteriumid);\n                    if (criterion) {\n                        criterion.grade = grade.grade;\n                        criterion.comment = grade.comment;\n                        criterion.options.forEach((option) => {\n                            option.selected = option.grade == grade.grade;\n                        });\n                    }\n                });\n            } else {\n                // Tag each criteria with the user's grade.\n                data.grids[0].criteria.forEach((criterion) => {\n                    criterion.userid = args.userid;\n                    criterion.grade = 0;\n                    criterion.options[0].selected = true;\n                    criterion.comment = '';\n                });\n            }\n            return data.grids[0];\n        }\n        return data;\n    }\n\n    /**\n     * Get the Evaluation Grading\n     * @param {Object} args The grading to get.\n     * @return {Promise} The promise.\n     */\n    async getEvaluationGrading(args) {\n        const file = await this.getJsonData({filename: 'evaluation-grading'});\n        const storage = localStorage.getItem('evaluation-grading');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('evaluation-grading-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                evaluationsgrading: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Get the global grade for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getGlobalGrade(args) {\n        const file = await this.getJsonData({filename: 'global-grade'});\n        const storage = localStorage.getItem('global-grade');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('global-grade-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                globalgrade: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Save the global grade.\n     * @param {Object} data The data to save.\n     * @returns {Promise} The promise.\n     */\n    async saveGlobalGrade(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('global-grade-' + data.userid, JSON.stringify(data));\n        // Return a promise with a 500ms delay.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the bare list criteria, not the user's grades.\n     *\n     * @param {Object} data The data to save.\n     * @returns {Promise}\n     */\n    async saveListCriteria(data) {\n        // Temporary, remove all elements with a deleted flag.\n        data.grids[0].criteria = data.grids[0].criteria.filter((criterion) => !criterion.deleted);\n        // Also remove all options with a deleted flag.\n        data.grids[0].criteria.forEach((criterion) => {\n            criterion.options = criterion.options.filter((option) => !option.deleted);\n        });\n        localStorage.setItem('list-criteria', JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the user grades for the list criteria.\n     * @param {Object} data The data to save.\n     */\n    async saveListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('list-criteria-' + data.userid, JSON.stringify(data));\n    }\n\n    /**\n     * Save the evaluation grading.\n     * @param {Object} data The data to save.\n     * @returns {Promise} The promise.\n     */\n    async saveEvaluationGrading(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('evaluation-grading-' + data.userid, JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Get the user grades for the list criteria.\n     * @param {Object} data The data to get.\n     * @return {Promise} The promise.\n     */\n    async getListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        const storage = localStorage.getItem('list-criteria-' + data.userid);\n        if (storage) {\n            return JSON.parse(storage);\n        }\n    }\n\n    /**\n     * Get the Plannings data\n     * @param {Object} cmid The cmid to get.\n     * @return {Promise} The promise.\n     */\n    async getPlannings(cmid) {\n        const args = {\n            cmid,\n        };\n        return Ajax.call([{methodname: 'mod_competvet_get_plannings', args}])[0];\n    }\n}\n\nconst RepositoryInstance = new Repository();\n\nexport default RepositoryInstance;"],"names":["getUserList","args","request","methodname","promise","Ajax","call","fail","Notification","exception","getEvaluations","getUserComments","getCertification","saveGrade","getComment","saveComment","deleteComment","deleteGrade","getJsonData","file","this","filename","storage","localStorage","getItem","data","JSON","parse","userid","userGrades","getListGrades","criteria","forEach","grade","criterion","grids","find","c","criteriumid","comment","options","option","selected","evaluationsgrading","globalgrade","setItem","stringify","Promise","resolve","setTimeout","filter","deleted","cmid"],"mappings":"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"}