{"version":3,"file":"new-repository.min.js","sources":["../../src/local/new-repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * competvet repository.\n *\n * @module     mod_competvet/local/grading/repository\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * competvet repository class.\n */\nclass Repository {\n\n    /**\n     * Get the User list.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getUserList(args) {\n        const request = {\n            methodname: 'mod_competvet_get_user_list',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get the Evaluations for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getEvaluations(args) {\n        const request = {\n            methodname: 'mod_competvet_get_evaluations',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get JSON data\n     * @param {Object} args The data to get.\n     * @return {Promise} The promise.\n     */\n    getJsonData(args) {\n        const request = {\n            methodname: 'mod_competvet_get_json',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the List Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getListCriteria(args) {\n        const file = await this.getJsonData({filename: 'list-criteria'});\n        const storage = localStorage.getItem('list-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n\n            // Now get the user's grades.\n            const userGrades = await this.getListGrades(args);\n            if (userGrades) {\n                userGrades.criteria.forEach((grade) => {\n                    const criterion = data.grids[0].criteria.find((c) => c.criteriumid === grade.criteriumid);\n                    if (criterion) {\n                        criterion.grade = grade.grade;\n                        criterion.comment = grade.comment;\n                        criterion.options.forEach((option) => {\n                            option.selected = option.grade == grade.grade;\n                        });\n                    }\n                });\n            } else {\n                // Tag each criteria with the user's grade.\n                data.grids[0].criteria.forEach((criterion) => {\n                    criterion.userid = args.userid;\n                    criterion.grade = 0;\n                    criterion.options[0].selected = true;\n                    criterion.comment = '';\n                });\n            }\n            return data.grids[0];\n        }\n        return data;\n    }\n\n    /**\n     * Get the Evaluation Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getEvaluationCriteria(args) {\n        const file = await this.getJsonData({filename: 'evaluation-criteria'});\n        const storage = localStorage.getItem('evaluation-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid && args.cmid) {\n            data.userid = args.userid;\n            const storage = await this.getJsonData({filename: 'evaluation-criteria-' + args.userid + '-' + args.cmid});\n            if (!storage.data) {\n                return data.grids[0];\n            }\n            const userdata = JSON.parse(storage.data);\n            return userdata;\n        }\n        return data;\n    }\n\n    /**\n     * Get Certification Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getCertificationCriteria(args) {\n        const file = await this.getJsonData({filename: 'certification-criteria'});\n        const storage = localStorage.getItem('certification-criteria');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid && args.cmid) {\n            data.userid = args.userid;\n            // Here the backend should return the current grid including the user's grades.\n            // const storage = localStorage.getItem('certification-criteria-' + args.userid + '-' + args.cmid);\n            const storage = await this.getJsonData({filename: 'certification-criteria-' + args.userid + '-' + args.cmid});\n            if (!storage.data) {\n                return data.grids[0];\n            }\n            const userdata = JSON.parse(storage.data);\n\n            return userdata;\n        }\n        return data;\n    }\n\n    /**\n     * Get the Evaluation Grading\n     * @param {Object} args The grading to get.\n     * @return {Promise} The promise.\n     */\n    async getEvaluationGrading(args) {\n        const file = await this.getJsonData({filename: 'evaluation-grading'});\n        const storage = localStorage.getItem('evaluation-grading');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('evaluation-grading-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                evaluationsgrading: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Get the Certification Grading\n     * @param {Object} args The grading to get.\n     * @return {Promise} The promise.\n     */\n    async getCertificationGrading(args) {\n        const file = await this.getJsonData({filename: 'certification-grading'});\n        const storage = localStorage.getItem('certification-grading');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('certification-grading-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                certifgrading: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Get the global grade for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getGlobalGrade(args) {\n        const file = await this.getJsonData({filename: 'global-grade'});\n        const storage = localStorage.getItem('global-grade');\n        const data = JSON.parse(storage) || JSON.parse(file.data);\n        if (args.userid) {\n            data.userid = args.userid;\n            const storage = localStorage.getItem('global-grade-' + args.userid);\n            if (!storage) {\n                return data;\n            }\n            const userdata = JSON.parse(storage);\n            return {\n                globalgrade: userdata,\n            };\n        }\n        return data;\n    }\n\n    /**\n     * Save the global grade.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveGlobalGrade(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('global-grade-' + data.userid, JSON.stringify(data));\n        // Return a promise with a 500ms delay.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the bare list criteria, not the user's grades.\n     *\n     * @param {Object} data The data to save.\n     * @return {Promise}\n     */\n    async saveListCriteria(data) {\n        // Temporary, remove all elements with a deleted flag.\n        data.grids[0].criteria = data.grids[0].criteria.filter((criterion) => !criterion.deleted);\n        // Also remove all options with a deleted flag.\n        data.grids[0].criteria.forEach((criterion) => {\n            criterion.options = criterion.options.filter((option) => !option.deleted);\n        });\n        localStorage.setItem('list-criteria', JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the evaluation criteria.\n     *\n     * @param {Object} data The data to save.\n     * @return {Promise}\n     */\n    async saveEvaluationCriteria(data) {\n        localStorage.setItem('evaluation-criteria', JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the certification criteria.\n     *\n     * @param {Object} data The data to save.\n     * @return {Promise}\n     */\n    async saveCertificationCriteria(data) {\n        localStorage.setItem('certification-criteria', JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the user grades for the list criteria.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('list-criteria-' + data.userid, JSON.stringify(data));\n        const promise = new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n        return promise;\n    }\n\n    /**\n     * Save the evaluation grading.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveEvaluationGrading(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('evaluation-grading-' + data.userid, JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Save the certification grading.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveCertificationGrading(data) {\n        if (!data.userid) {\n            return;\n        }\n        localStorage.setItem('certification-grading-' + data.userid, JSON.stringify(data));\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, 500);\n        });\n    }\n\n    /**\n     * Get the user grades for the list criteria.\n     * @param {Object} data The data to get.\n     * @return {Promise} The promise.\n     */\n    async getListGrades(data) {\n        if (!data.userid) {\n            return;\n        }\n        const storage = localStorage.getItem('list-criteria-' + data.userid);\n        if (storage) {\n            return JSON.parse(storage);\n        }\n    }\n\n    /**\n     * Get the Cases for the List Results.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getListResults(args) {\n        window.console.log('getListResults', args);\n        const file = await this.getJsonData({filename: 'list-results'});\n        const data = JSON.parse(file.data);\n        return data;\n    }\n\n    /**\n     * Get the Plannings data\n     * @param {Object} cmid The cmid to get.\n     * @return {Promise} The promise.\n     */\n    async getPlannings(cmid) {\n        const args = {\n            cmid,\n        };\n        return Ajax.call([{methodname: 'mod_competvet_get_plannings', args}])[0];\n    }\n}\n\nconst RepositoryInstance = new Repository();\n\nexport default RepositoryInstance;"],"names":["getUserList","args","request","methodname","promise","Ajax","call","fail","Notification","exception","getEvaluations","getJsonData","file","this","filename","storage","localStorage","getItem","data","JSON","parse","userid","userGrades","getListGrades","criteria","forEach","grade","criterion","grids","find","c","criteriumid","comment","options","option","selected","cmid","evaluationsgrading","certifgrading","globalgrade","setItem","stringify","Promise","resolve","setTimeout","filter","deleted","window","console","log"],"mappings":"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"}