{"version":3,"file":"new-repository.min.js","sources":["../../src/local/new-repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * competvet repository.\n *\n * @module     mod_competvet/local/new-repository\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Competvet repository class.\n */\nclass Repository {\n\n    /**\n     * Get the User list.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getUserList(args) {\n        const request = {\n            methodname: 'mod_competvet_get_user_list',\n            args: args\n        };\n        const promise = Ajax.call([request])[0];\n        promise.fail(Notification.exception);\n        return promise;\n    }\n\n    /**\n     * Get JSON data\n     * @param {Object} args The data to get.\n     * @return {Promise} The promise.\n     */\n    getJsonData(args) {\n        const request = {\n            methodname: 'mod_competvet_get_json',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the Competvet Criteria\n     * @param {Object} args The criteria to get.\n     * @return {Promise} The promise.\n     */\n    async getCriteria(args) {\n        return Ajax.call([{methodname: 'mod_competvet_get_criteria', args: args}])[0];\n    }\n\n    /**\n     * Get the global grade for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getGlobalGrade(args) {\n        return Ajax.call([{methodname: 'mod_competvet_get_global_grade', args: args}])[0];\n    }\n\n    /**\n     * Save the global grade.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveGlobalGrade(data) {\n        return Ajax.call([{methodname: 'mod_competvet_save_global_grade', args: data}])[0];\n    }\n\n    /**\n     * Save the criteria.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveCriteria(data) {\n        return Ajax.call([{methodname: 'mod_competvet_manage_criteria', args: data}])[0];\n    }\n\n    /**\n     * Save the plannings.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async savePlannings(data) {\n        return Ajax.call([{methodname: 'mod_competvet_manage_plannings', args: data}])[0];\n    }\n\n\n    /**\n     * Get the Cases for the List Results.\n     * @return {Promise} The promise.\n     */\n    async getListResults() {\n        const file = await this.getJsonData({filename: 'list-results'});\n        const data = JSON.parse(file.data);\n        return data;\n    }\n\n    /**\n     * Get the Plannings data\n     * @param {Object} cmid The cmid to get.\n     * @return {Promise} The promise.\n     */\n    async getPlannings(cmid) {\n        const args = {\n            cmid,\n        };\n        return Ajax.call([{methodname: 'mod_competvet_get_plannings', args}])[0];\n    }\n\n    /**\n     * Get the formdata for a user.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    async getFormData(args) {\n        return Ajax.call([{methodname: 'mod_competvet_get_formdata', args: args}])[0];\n    }\n\n    /**\n     * Save the formdata for a user.\n     * @param {Object} data The data to save.\n     * @return {Promise} The promise.\n     */\n    async saveFormData(data) {\n        return Ajax.call([{methodname: 'mod_competvet_store_formdata', args: data}])[0];\n    }\n}\n\nconst RepositoryInstance = new Repository();\n\nexport default RepositoryInstance;"],"names":["getUserList","args","request","methodname","promise","Ajax","call","fail","Notification","exception","getJsonData","data","file","this","filename","JSON","parse","cmid"],"mappings":";;;;;;;0LAsJ2B,UAlHvBA,YAAYC,YACFC,QAAU,CACZC,WAAY,8BACZF,KAAMA,MAEJG,QAAUC,cAAKC,KAAK,CAACJ,UAAU,UACrCE,QAAQG,KAAKC,sBAAaC,WACnBL,QAQXM,YAAYT,YACFC,QAAU,CACZC,WAAY,yBACZF,KAAMA,aAGII,cAAKC,KAAK,CAACJ,UAAU,GAC9BK,KAAKC,sBAAaC,6BAUTR,aACPI,cAAKC,KAAK,CAAC,CAACH,WAAY,6BAA8BF,KAAMA,QAAQ,wBAQ1DA,aACVI,cAAKC,KAAK,CAAC,CAACH,WAAY,iCAAkCF,KAAMA,QAAQ,yBAQ7DU,aACXN,cAAKC,KAAK,CAAC,CAACH,WAAY,kCAAmCF,KAAMU,QAAQ,sBAQjEA,aACRN,cAAKC,KAAK,CAAC,CAACH,WAAY,gCAAiCF,KAAMU,QAAQ,uBAQ9DA,aACTN,cAAKC,KAAK,CAAC,CAACH,WAAY,iCAAkCF,KAAMU,QAAQ,gCASzEC,WAAaC,KAAKH,YAAY,CAACI,SAAU,wBAClCC,KAAKC,MAAMJ,KAAKD,yBASdM,YACThB,KAAO,CACTgB,KAAAA,aAEGZ,cAAKC,KAAK,CAAC,CAACH,WAAY,8BAA+BF,KAAAA,QAAQ,qBAQxDA,aACPI,cAAKC,KAAK,CAAC,CAACH,WAAY,6BAA8BF,KAAMA,QAAQ,sBAQ5DU,aACRN,cAAKC,KAAK,CAAC,CAACH,WAAY,+BAAgCF,KAAMU,QAAQ"}