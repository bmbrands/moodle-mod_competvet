define("mod_competvet/local/new-repository",["exports","core/ajax","core/notification"],(function(_exports,_ajax,_notification){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * competvet repository.
   *
   * @module     mod_competvet/local/grading/repository
   * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_ajax=_interopRequireDefault(_ajax),_notification=_interopRequireDefault(_notification);var _default=new class{getUserList(args){const request={methodname:"mod_competvet_get_user_list",args:args},promise=_ajax.default.call([request])[0];return promise.fail(_notification.default.exception),promise}getEvaluations(args){const request={methodname:"mod_competvet_get_evaluations",args:args},promise=_ajax.default.call([request])[0];return promise.fail(_notification.default.exception),promise}getJsonData(args){const request={methodname:"mod_competvet_get_json",args:args};return _ajax.default.call([request])[0].fail(_notification.default.exception)}async getListCriteria(args){const file=await this.getJsonData({filename:"list-criteria"}),storage=localStorage.getItem("list-criteria"),data=JSON.parse(storage)||JSON.parse(file.data);if(args.userid){const userGrades=await this.getListGrades(args);return userGrades?userGrades.criteria.forEach((grade=>{const criterion=data.grids[0].criteria.find((c=>c.criteriumid===grade.criteriumid));criterion&&(criterion.grade=grade.grade,criterion.comment=grade.comment,criterion.options.forEach((option=>{option.selected=option.grade==grade.grade})))})):data.grids[0].criteria.forEach((criterion=>{criterion.userid=args.userid,criterion.grade=0,criterion.options[0].selected=!0,criterion.comment=""})),data.grids[0]}return data}async getEvaluationGrading(args){const file=await this.getJsonData({filename:"evaluation-grading"}),storage=localStorage.getItem("evaluation-grading"),data=JSON.parse(storage)||JSON.parse(file.data);if(args.userid){data.userid=args.userid;const storage=localStorage.getItem("evaluation-grading-"+args.userid);if(!storage)return data;return{evaluationsgrading:JSON.parse(storage)}}return data}async getCertificationGrading(args){const file=await this.getJsonData({filename:"certification-grading"}),storage=localStorage.getItem("certification-grading"),data=JSON.parse(storage)||JSON.parse(file.data);if(args.userid){data.userid=args.userid;const storage=localStorage.getItem("certification-grading-"+args.userid);if(!storage)return data;return{certifgrading:JSON.parse(storage)}}return data}async getGlobalGrade(args){const file=await this.getJsonData({filename:"global-grade"}),storage=localStorage.getItem("global-grade"),data=JSON.parse(storage)||JSON.parse(file.data);if(args.userid){data.userid=args.userid;const storage=localStorage.getItem("global-grade-"+args.userid);if(!storage)return data;return{globalgrade:JSON.parse(storage)}}return data}async saveGlobalGrade(data){if(data.userid)return localStorage.setItem("global-grade-"+data.userid,JSON.stringify(data)),new Promise((resolve=>{setTimeout((()=>{resolve()}),500)}))}async saveListCriteria(data){return data.grids[0].criteria=data.grids[0].criteria.filter((criterion=>!criterion.deleted)),data.grids[0].criteria.forEach((criterion=>{criterion.options=criterion.options.filter((option=>!option.deleted))})),localStorage.setItem("list-criteria",JSON.stringify(data)),new Promise((resolve=>{setTimeout((()=>{resolve()}),500)}))}async saveListGrades(data){if(!data.userid)return;localStorage.setItem("list-criteria-"+data.userid,JSON.stringify(data));return new Promise((resolve=>{setTimeout((()=>{resolve()}),500)}))}async saveEvaluationGrading(data){if(data.userid)return localStorage.setItem("evaluation-grading-"+data.userid,JSON.stringify(data)),new Promise((resolve=>{setTimeout((()=>{resolve()}),500)}))}async saveCertificationGrading(data){if(data.userid)return localStorage.setItem("certification-grading-"+data.userid,JSON.stringify(data)),new Promise((resolve=>{setTimeout((()=>{resolve()}),500)}))}async getListGrades(data){if(!data.userid)return;const storage=localStorage.getItem("list-criteria-"+data.userid);return storage?JSON.parse(storage):void 0}async getPlannings(cmid){const args={cmid:cmid};return _ajax.default.call([{methodname:"mod_competvet_get_plannings",args:args}])[0]}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=new-repository.min.js.map