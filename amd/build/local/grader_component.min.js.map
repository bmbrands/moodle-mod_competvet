{"version":3,"file":"grader_component.min.js","sources":["../../src/local/grader_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Grader component.\n *\n * @module     mod_competvet/local/grader_component\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getGradingAppReactive} from 'mod_competvet/local/grading_app_reactive';\nimport Templates from \"core/templates\";\n\nexport default class extends BaseComponent {\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'grader-component';\n        this.selectors = {\n            SUBMIT_BUTTON: `button[data-action='submit-grade']`,\n            GRADER_CONTENT: `[data-region='grader-content']`,\n        };\n        this.cmId = this.getElement().dataset.cmid;\n        this.itemName = this.getElement().dataset.itemName;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {Node} element the DOM main element\n     * @param {object} selectors optional css selector overrides\n     * @return {BaseComponent} the component instance\n     */\n    static init(element, selectors) {\n        const cmId = element.dataset.cmid;\n        const reactive = getGradingAppReactive(cmId); // Get or create reactive.\n        return new this({\n            element: element,\n            reactive: reactive,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @return {Promise<void>}\n     */\n    async stateReady() {\n        // Get the element to replace.\n        const target = this.getElement();\n        view(target, this.selectors.GRADER_CONTENT);\n        const submitButton = this.getElement(this.SUBMIT_BUTTON);\n        this.addEventListener(\n            submitButton,\n            'click',\n            this._submitGrade\n        );\n    }\n\n    /**\n     * Get Watcher\n     * @return {[{handler: *, watch: string}]}\n     */\n    getWatchers() {\n        return [];\n    }\n\n    async _submitGrade() {\n        const data = this.getElement().dataset;\n        const gradingPanelFunctions = await getGradingPanelFunctions(\n            'mod_competvet',\n            data.contextid,\n            data.gradingComponent,\n            data.gradingComponentSubtype,\n            data.itemName,\n        );\n        await gradingPanelFunctions.setter(data.userid, false, this.getElement(this.selectors.GRADER_CONTENT));\n    }\n}\n\n/**\n * Get the grade panel setter and getter for the current component.\n * This function dynamically pulls the relevant gradingpanel JS file defined in the grading method.\n * We do this because we do not know until execution time what the grading type is and we do not want to import unused files.\n *\n * @method\n * @param {String} component The component being graded\n * @param {Number} context The contextid of the thing being graded\n * @param {String} gradingComponent The thing providing the grading type\n * @param {String} gradingSubtype The subtype fo the grading component\n * @param {String} itemName The name of the thing being graded\n * @return {Object}\n */\nconst getGradingPanelFunctions = async(component, context, gradingComponent, gradingSubtype, itemName) => {\n    let gradingMethodHandler = `${gradingComponent}/grades/grader/gradingpanel`;\n    if (gradingSubtype) {\n        gradingMethodHandler += `/${gradingSubtype}`;\n    }\n\n    const GradingMethod = await import(gradingMethodHandler);\n\n    return {\n        getter: (userId) => GradingMethod.fetchCurrentGrade(component, context, itemName, userId),\n        setter: (userId, notifyStudent, formData) => GradingMethod.storeCurrentGrade(\n            component, context, itemName, userId, notifyStudent, formData),\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {String} selector\n */\nconst view = async(rootNode, selector) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await getGradingPanelFunctions(\n        'mod_competvet',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.itemName\n    );\n    const userGrade = await gradingPanelFunctions.getter(data.userid);\n    const {html: gradeHTML, js: gradeJS} = await Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n    const graderContentElement = rootNode.querySelector(selector);\n    Templates.replaceNodeContents(graderContentElement, gradeHTML, gradeJS);\n};"],"names":["BaseComponent","create","name","selectors","SUBMIT_BUTTON","GRADER_CONTENT","cmId","this","getElement","dataset","cmid","itemName","element","reactive","target","view","submitButton","addEventListener","_submitGrade","getWatchers","data","gradingPanelFunctions","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","setter","userid","async","component","context","gradingSubtype","gradingMethodHandler","GradingMethod","getter","userId","fetchCurrentGrade","notifyStudent","formData","storeCurrentGrade","rootNode","selector","userGrade","html","gradeHTML","js","gradeJS","Templates","renderForPromise","templatename","grade","graderContentElement","querySelector","replaceNodeContents"],"mappings":"ogBA2B6BA,wBAIzBC,cAESC,KAAO,wBACPC,UAAY,CACbC,mDACAC,sDAECC,KAAOC,KAAKC,aAAaC,QAAQC,UACjCC,SAAWJ,KAAKC,aAAaC,QAAQE,qBAUlCC,QAAST,iBACXG,KAAOM,QAAQH,QAAQC,YAEtB,IAAIH,KAAK,CACZK,QAASA,QACTC,UAHa,+CAAsBP,MAInCH,UAAAA,qCAWEW,OAASP,KAAKC,aACpBO,KAAKD,OAAQP,KAAKJ,UAAUE,sBACtBW,aAAeT,KAAKC,WAAWD,KAAKH,oBACrCa,iBACDD,aACA,QACAT,KAAKW,cAQbC,oBACW,8BAIDC,KAAOb,KAAKC,aAAaC,QACzBY,4BAA8BC,yBAChC,gBACAF,KAAKG,UACLH,KAAKI,iBACLJ,KAAKK,wBACLL,KAAKT,gBAEHU,sBAAsBK,OAAON,KAAKO,QAAQ,EAAOpB,KAAKC,WAAWD,KAAKJ,UAAUE,kDAiBxFiB,yBAA2BM,MAAMC,UAAWC,QAASN,iBAAkBO,eAAgBpB,gBACrFqB,+BAA0BR,gDAC1BO,iBACAC,iCAA4BD,uBAG1BE,oOAA6BD,gYAAAA,8BAE5B,CACHE,OAASC,QAAWF,cAAcG,kBAAkBP,UAAWC,QAASnB,SAAUwB,QAClFT,OAAQ,CAACS,OAAQE,cAAeC,WAAaL,cAAcM,kBACvDV,UAAWC,QAASnB,SAAUwB,OAAQE,cAAeC,YAU3DvB,KAAOa,MAAMY,SAAUC,kBACnBrB,KAAOoB,SAAS/B,QAChBY,4BAA8BC,yBAChC,gBACAF,KAAKG,UACLH,KAAKI,iBACLJ,KAAKK,wBACLL,KAAKT,UAEH+B,gBAAkBrB,sBAAsBa,OAAOd,KAAKO,SACnDgB,KAAMC,UAAWC,GAAIC,eAAiBC,mBAAUC,iBAAiBN,UAAUO,aAAcP,UAAUQ,OACpGC,qBAAuBX,SAASY,cAAcX,6BAC1CY,oBAAoBF,qBAAsBP,UAAWE"}