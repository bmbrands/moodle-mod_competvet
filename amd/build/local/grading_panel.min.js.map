{"version":3,"file":"grading_panel.min.js","sources":["../../src/local/grading_panel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Grading panel functions.\n *\n * @module     mod_competvet/localgradingpanel\n */\n\nimport Templates from \"core/templates\";\n\n/**\n * Get the grade panel setter and getter for the current component.\n * This function dynamically pulls the relevant gradingpanel JS file defined in the grading method.\n * We do this because we do not know until execution time what the grading type is and we do not want to import unused files.\n *\n * @method\n * @param {String} component The component being graded\n * @param {Number} context The contextid of the thing being graded\n * @param {String} gradingComponent The thing providing the grading type\n * @param {String} gradingSubtype The subtype fo the grading component\n * @param {String} itemName The name of the thing being graded\n * @return {Object}\n */\nconst getGradingPanelFunctions = async(component, context, gradingComponent, gradingSubtype, itemName) => {\n    let gradingMethodHandler = `${gradingComponent}/grades/grader/gradingpanel`;\n    if (gradingSubtype) {\n        gradingMethodHandler += `/${gradingSubtype}`;\n    }\n\n    const GradingMethod = await import(gradingMethodHandler);\n\n    return {\n        getter: (userId) => GradingMethod.fetchCurrentGrade(component, context, itemName, userId),\n        setter: (userId, notifyStudent, formData) => GradingMethod.storeCurrentGrade(\n            component, context, itemName, userId, notifyStudent, formData),\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nexport const view = async(rootNode) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await getGradingPanelFunctions(\n        'mod_competvet',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n    const userGrade = await gradingPanelFunctions.getter(data.userid);\n    const [gradeHTML, gradeJS] = await Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n    const gradeReplace = rootNode.querySelector('[data-region=\"grade-template\"]');\n    Templates.replaceNodeContents(gradeReplace, gradeHTML, gradeJS);\n};"],"names":["async","data","rootNode","dataset","gradingPanelFunctions","component","context","gradingComponent","gradingSubtype","itemName","gradingMethodHandler","GradingMethod","getter","userId","fetchCurrentGrade","setter","notifyStudent","formData","storeCurrentGrade","getGradingPanelFunctions","contextid","gradingComponentSubtype","gradableItemtype","userGrade","userid","gradeHTML","gradeJS","Templates","renderForPromise","templatename","grade","gradeReplace","querySelector","replaceNodeContents"],"mappings":"0ZAwDoBA,MAAAA,iBACVC,KAAOC,SAASC,QAChBC,2BAtBuBJ,OAAMK,UAAWC,QAASC,iBAAkBC,eAAgBC,gBACrFC,+BAA0BH,gDAC1BC,iBACAE,iCAA4BF,uBAG1BG,oOAA6BD,gYAAAA,8BAE5B,CACHE,OAASC,QAAWF,cAAcG,kBAAkBT,UAAWC,QAASG,SAAUI,QAClFE,OAAQ,CAACF,OAAQG,cAAeC,WAAaN,cAAcO,kBACvDb,UAAWC,QAASG,SAAUI,OAAQG,cAAeC,YAWzBE,CAChC,gBACAlB,KAAKmB,UACLnB,KAAKM,iBACLN,KAAKoB,wBACLpB,KAAKqB,kBAEHC,gBAAkBnB,sBAAsBQ,OAAOX,KAAKuB,SACnDC,UAAWC,eAAiBC,mBAAUC,iBAAiBL,UAAUM,aAAcN,UAAUO,OAC1FC,aAAe7B,SAAS8B,cAAc,qDAClCC,oBAAoBF,aAAcN,UAAWC"}