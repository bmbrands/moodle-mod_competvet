{"version":3,"file":"competstate.min.js","sources":["../../src/local/competstate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A reactive state class that stores the data for the competvet module.\n *\n * @module     mod_competvet/local/grading2/competstate\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * A simple state class that stores the data for the competvet module.\n * Classes can subscribe to this class to get updates.\n */\nclass CompetState {\n    /**\n    * Constructor.\n    */\n    constructor() {\n        this.data = {};\n        this.subscribers = [];\n    }\n\n    /**\n     * Set the data.\n     * @param {Object} data The data.\n     */\n    setData(data) {\n        this.data = data;\n        this.notifySubscribers();\n        this.debug();\n    }\n\n    /**\n     * Get the data.\n     * @return {Object} The data.\n     */\n    getData() {\n        return this.data;\n    }\n\n    /**\n     * Subscribe to the state.\n     * @param {String} key The key.\n     * @param {Function} callback The callback.\n     */\n    subscribe(key, callback) {\n        if (typeof key !== 'string') {\n            throw new Error('The key must be a string');\n        }\n        if (typeof callback !== 'function') {\n            throw new Error('The callback must be a function');\n        }\n\n        // Check if the key is already subscribed.\n        const existingSubscriber = this.subscribers.find(subscriber => subscriber.key === key);\n        if (existingSubscriber) {\n            window.console.log('The key is already subscribed');\n        }\n\n        this.subscribers.push({key, callback});\n    }\n\n    /**\n     * Unsubscribe from the state.\n     * @param {Function} callback The callback.\n     */\n    unsubscribe(callback) {\n        this.subscribers = this.subscribers.filter(subscriber => subscriber.callback !== callback);\n    }\n\n    /**\n     * Notify the subscribers.\n     */\n    notifySubscribers() {\n        this.subscribers.forEach(subscriber => subscriber.callback(this.data));\n    }\n\n    /**\n     * Debugging function.\n    */\n    debug() {\n        const debugRegion = document.getElementById('debug');\n        if (debugRegion) {\n            debugRegion.innerHTML = JSON.stringify(this.data, null, 2);\n        }\n    }\n}\n\nconst state = new CompetState();\nexport default state;\n"],"names":["constructor","data","subscribers","setData","notifySubscribers","debug","getData","this","subscribe","key","callback","Error","find","subscriber","window","console","log","push","unsubscribe","filter","forEach","debugRegion","document","getElementById","innerHTML","JSON","stringify"],"mappings":"sKAsGc;;;;;;;;MAvEVA,mBACSC,KAAO,QACPC,YAAc,GAOvBC,QAAQF,WACCA,KAAOA,UACPG,yBACAC,QAOTC,iBACWC,KAAKN,KAQhBO,UAAUC,IAAKC,aACQ,iBAARD,UACD,IAAIE,MAAM,+BAEI,mBAAbD,eACD,IAAIC,MAAM,mCAIOJ,KAAKL,YAAYU,MAAKC,YAAcA,WAAWJ,MAAQA,OAE9EK,OAAOC,QAAQC,IAAI,sCAGlBd,YAAYe,KAAK,CAACR,IAAAA,IAAKC,SAAAA,WAOhCQ,YAAYR,eACHR,YAAcK,KAAKL,YAAYiB,QAAON,YAAcA,WAAWH,WAAaA,WAMrFN,yBACSF,YAAYkB,SAAQP,YAAcA,WAAWH,SAASH,KAAKN,QAMpEI,cACUgB,YAAcC,SAASC,eAAe,SACxCF,cACAA,YAAYG,UAAYC,KAAKC,UAAUnB,KAAKN,KAAM,KAAM"}