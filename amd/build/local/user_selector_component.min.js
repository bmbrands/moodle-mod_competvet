define("mod_competvet/local/user_selector_component",["exports","core/reactive","mod_competvet/local/grading_app_reactive","mod_competvet/local/events"],(function(_exports,_reactive,_grading_app_reactive,_events){var obj;
/**
   * User selector component.
   *
   * @module     mod_competvet/local/user_selector_component
   * @copyright  2023 Laurent David <laurent@call-learning.fr>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_events=(obj=_events)&&obj.__esModule?obj:{default:obj};class _default extends _reactive.BaseComponent{create(){this.name="user-selector",this.selectors={NEXT_USER:"[data-action='next-user']",PREVIOUS_USER:"[data-action='previous-user']",SHOW_HIDE_FILTERS:"[data-region='user-filters']",FILTER_REGION:"[data-region='configure-filters']",USER_LIST:"#change-user-select"},this.cmId=this.getElement().dataset.cmid}static init(element,selectors){const cmId=element.dataset.cmid;return new this({element:element,reactive:(0,_grading_app_reactive.getGradingAppReactive)(cmId),selectors:selectors})}async stateReady(){const target=this.getElement();this.addEventListener(target.querySelector(this.selectors.NEXT_USER),"click",this._nextUser),this.addEventListener(target.querySelector(this.selectors.PREVIOUS_USER),"click",this._previousUser),this.addEventListener(target.querySelector(this.selectors.SHOW_HIDE_FILTERS),"click",this._filtersToggle)}getWatchers(){return[{watch:"state.currentUser:updated",handler:this._updateUser},{watch:"info.filterShow:updated",handler:this._filterToggle}]}_filtersToggle(event){event.preventDefault(),this.reactive.dispatch(_events.default.filtersToggle)}_nextUser(event){event.preventDefault(),this.reactive.dispatch(_events.default.currentUserChange,"next")}_previousUser(event){event.preventDefault(),this.reactive.dispatch(_events.default.currentUserChange,"previous")}_updateUser(_ref){let{element:element}=_ref;const userId=element.currentUser.id,userElement=this.getElement().querySelector(this.selectors.USER_LIST).querySelector('option[value="'.concat(userId,'"]'));userElement&&(userElement.selected=!0)}_filterToggle(_ref2){let{element:element}=_ref2;const filterRegion=this.element.querySelector(this.selectors.FILTER_REGION);element.filterShow?filterRegion.classList.remove("d-none"):filterRegion.classList.add("d-none")}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=user_selector_component.min.js.map