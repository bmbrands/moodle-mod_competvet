{"version":3,"file":"plannings.min.js","sources":["../../../src/local/view/plannings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper to filter the plannings\n *\n * @module     mod_competvet/local/view/plannings\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\n\nexport const init = () => {\n    // Student Search\n    const studentSearchInput = document.querySelector('input[name=\"studentsearch\"]');\n    studentSearchInput.addEventListener('input', (e) => {\n        studentSearch(e);\n    });\n    // Group Search\n    const groupSearchInput = document.querySelector('input[name=\"groupsearch\"]');\n    groupSearchInput.addEventListener('input', (e) => {\n        groupSearch(e);\n    });\n\n};\n\nconst studentSearch = (e) => {\n    const search = e.target.value;\n    const students = document.querySelectorAll('[data-region=\"studentname\"]');\n    students.forEach((student) => {\n        const studentName = student.textContent;\n        const row = student.closest('tr');\n        if (studentName.toLowerCase().includes(search.toLowerCase())) {\n            row.classList.remove('d-none');\n        } else {\n            row.classList.add('d-none');\n        }\n        // Check if all rows with the same planningid are hidden\n        const planningid = row.dataset.planningid;\n        const rows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n        const hiddenRows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"].d-none`);\n        // If all rows are hidden, hide the planning row\n        if (rows.length === hiddenRows.length) {\n            const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"]`);\n            planningRow.classList.add('d-none');\n        } else {\n            const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"]`);\n            planningRow.classList.remove('d-none');\n        }\n    });\n};\n\nconst groupSearch = (e) => {\n    const search = e.target.value;\n    const groups = document.querySelectorAll('[data-region=\"groupname\"]');\n    groups.forEach((group) => {\n        const groupName = group.textContent;\n        const row = group.closest('tr');\n        if (groupName.toLowerCase().includes(search.toLowerCase())) {\n            row.classList.remove('d-none');\n        } else {\n            row.classList.add('d-none');\n        }\n        // If a planning row is hidden, hide all student rows with the same planningid\n        const planningid = row.dataset.planningid;\n        const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"].d-none`);\n        if (planningRow) {\n            const studentRows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n            studentRows.forEach((studentRow) => {\n                studentRow.classList.add('d-none');\n            });\n        } else {\n            const studentRows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n            studentRows.forEach((studentRow) => {\n                studentRow.classList.remove('d-none');\n            });\n        }\n    });\n};\n\n"],"names":["document","querySelector","addEventListener","e","studentSearch","groupSearch","search","target","value","querySelectorAll","forEach","student","studentName","textContent","row","closest","toLowerCase","includes","classList","remove","add","planningid","dataset","rows","hiddenRows","length","group","groupName","studentRow"],"mappings":"uKAyBoB,KAEWA,SAASC,cAAc,+BAC/BC,iBAAiB,SAAUC,IAC1CC,cAAcD,MAGOH,SAASC,cAAc,6BAC/BC,iBAAiB,SAAUC,IACxCE,YAAYF,aAKdC,cAAiBD,UACbG,OAASH,EAAEI,OAAOC,MACPR,SAASS,iBAAiB,+BAClCC,SAASC,gBACRC,YAAcD,QAAQE,YACtBC,IAAMH,QAAQI,QAAQ,MACxBH,YAAYI,cAAcC,SAASX,OAAOU,eAC1CF,IAAII,UAAUC,OAAO,UAErBL,IAAII,UAAUE,IAAI,gBAGhBC,WAAaP,IAAIQ,QAAQD,WACzBE,KAAOvB,SAASS,qDAA8CY,kBAC9DG,WAAaxB,SAASS,qDAA8CY,4BAEtEE,KAAKE,SAAWD,WAAWC,OAAQ,CACfzB,SAASC,mDAA4CoB,kBAC7DH,UAAUE,IAAI,cACvB,CACiBpB,SAASC,mDAA4CoB,kBAC7DH,UAAUC,OAAO,eAKnCd,YAAeF,UACXG,OAASH,EAAEI,OAAOC,MACTR,SAASS,iBAAiB,6BAClCC,SAASgB,cACNC,UAAYD,MAAMb,YAClBC,IAAMY,MAAMX,QAAQ,MACtBY,UAAUX,cAAcC,SAASX,OAAOU,eACxCF,IAAII,UAAUC,OAAO,UAErBL,IAAII,UAAUE,IAAI,gBAGhBC,WAAaP,IAAIQ,QAAQD,cACXrB,SAASC,mDAA4CoB,yBACxD,CACOrB,SAASS,qDAA8CY,kBAC/DX,SAASkB,aACjBA,WAAWV,UAAUE,IAAI,iBAE1B,CACiBpB,SAASS,qDAA8CY,kBAC/DX,SAASkB,aACjBA,WAAWV,UAAUC,OAAO"}