define("mod_competvet/local/view/plannings",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;_exports.init=()=>{document.querySelector('input[name="studentsearch"]').addEventListener("input",(e=>{studentSearch(e)}));document.querySelector('input[name="groupsearch"]').addEventListener("input",(e=>{groupSearch(e)}));document.querySelector('input[id="searchungraded"]').addEventListener("change",(e=>{ungradedSearch(e)}));const startDateInput=document.querySelector('input[name="startdate"]');startDateInput.addEventListener("change",(e=>{let unixTimestamp=0;if(e.target.value){const timestamp=new Date(e.target.value).getTime();unixTimestamp=Math.floor(timestamp/1e3)}unixTimestamp-=86400,startDateSearch(unixTimestamp)}));document.querySelector('button[id="clearstartdate"]').addEventListener("click",(()=>{startDateInput.value="",startDateSearch(0)}))};const studentSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="studentname"]').forEach((student=>{const studentName=student.textContent,row=student.closest("tr");studentName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("studentname-d-none"):row.classList.add("studentname-d-none")})),hideEmptyPlannings()},groupSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="groupname"]').forEach((group=>{const groupName=group.textContent,row=group.closest("tr");groupName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("groupname-d-none"):row.classList.add("groupname-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"groupname-d-none")})),hideEmptyPlannings()},ungradedSearch=e=>{const checked=e.target.checked,hasgrade=document.querySelectorAll('.student[data-hasgrade="1"]');checked?hasgrade.forEach((student=>{student.classList.add("ungraded-d-none")})):hasgrade.forEach((student=>{student.classList.remove("ungraded-d-none")})),hideEmptyPlannings()},startDateSearch=value=>{document.querySelectorAll(".planning").forEach((planning=>{const startDate=planning.dataset.starttimestamp,row=planning.closest("tr");value<startDate?row.classList.remove("startdate-d-none"):row.classList.add("startdate-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"startdate-d-none")}))},hideEmptyPlannings=()=>{document.querySelectorAll("tr.planning").forEach((planning=>{const planningid=planning.dataset.planningid,students=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')),hiddenStudents=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"].studentname-d-none,\n            .student[data-planningid="').concat(planningid,'"].groupname-d-none, .student[data-planningid="').concat(planningid,'"].ungraded-d-none'));if(students.length===hiddenStudents.length){document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.add("d-none")}else{document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.remove("d-none")}}))},hideStudentsInPlanning=(planningid,hideclass)=>{if(document.querySelector('.planning[data-planningid="'.concat(planningid,'"].').concat(hideclass))){document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.add(hideclass)}))}else{document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.remove(hideclass)}))}}}));

//# sourceMappingURL=plannings.min.js.map