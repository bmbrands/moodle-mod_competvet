define("mod_competvet/local/view/plannings",["exports","core/str","mod_competvet/local/xlsx.mini.min"],(function(_exports,_str,_xlsxMini){var obj;
/**
   * Helper to filter the plannings
   *
   * @module     mod_competvet/local/view/plannings
   * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_xlsxMini=(obj=_xlsxMini)&&obj.__esModule?obj:{default:obj};_exports.init=()=>{document.querySelector('input[name="studentsearch"]').addEventListener("input",(e=>{studentSearch(e)}));document.querySelector('input[name="groupsearch"]').addEventListener("input",(e=>{groupSearch(e)}));document.querySelector('input[id="searchungraded"]').addEventListener("change",(e=>{ungradedSearch(e)}));const startDateInput=document.querySelector('input[name="startdate"]');startDateInput.addEventListener("change",(e=>{let unixTimestamp=0;if(e.target.value){const timestamp=new Date(e.target.value).getTime();unixTimestamp=Math.floor(timestamp/1e3)}unixTimestamp-=86400,startDateSearch(unixTimestamp)}));document.querySelector('button[id="clearstartdate"]').addEventListener("click",(e=>{startDateInput.value="",startDateSearch(0),e.preventDefault()}));document.querySelector('button[data-action="exportcsv"]').addEventListener("click",(e=>{exportToCsv(),e.preventDefault()}))};const studentSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="studentname"]').forEach((student=>{const studentName=student.textContent,row=student.closest("tr");studentName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("studentname-d-none"):row.classList.add("studentname-d-none")})),hideEmptyPlannings()},groupSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="groupname"]').forEach((group=>{const groupName=group.textContent,row=group.closest("tr");groupName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("groupname-d-none"):row.classList.add("groupname-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"groupname-d-none")})),hideEmptyPlannings()},ungradedSearch=e=>{const checked=e.target.checked,hasgrade=document.querySelectorAll('.student[data-hasgrade="1"]');checked?hasgrade.forEach((student=>{student.classList.add("ungraded-d-none")})):hasgrade.forEach((student=>{student.classList.remove("ungraded-d-none")})),hideEmptyPlannings()},startDateSearch=value=>{document.querySelectorAll(".planning").forEach((planning=>{const startDate=planning.dataset.starttimestamp,row=planning.closest("tr");value<startDate?row.classList.remove("startdate-d-none"):row.classList.add("startdate-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"startdate-d-none")}))},hideEmptyPlannings=()=>{document.querySelectorAll("tr.planning").forEach((planning=>{const planningid=planning.dataset.planningid,students=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')),hiddenStudents=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"].studentname-d-none,\n            .student[data-planningid="').concat(planningid,'"].groupname-d-none, .student[data-planningid="').concat(planningid,'"].ungraded-d-none'));if(students.length===hiddenStudents.length){document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.add("d-none")}else{document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.remove("d-none")}}))},hideStudentsInPlanning=(planningid,hideclass)=>{if(document.querySelector('.planning[data-planningid="'.concat(planningid,'"].').concat(hideclass))){document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.add(hideclass)}))}else{document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.remove(hideclass)}))}},exportToCsv=async()=>{const rows=document.querySelectorAll('tr.student:not([class*="-d-none"])'),csv=[],[name,group,grade,comment,date]=await(0,_str.get_strings)([{key:"name",component:"moodle"},{key:"group",component:"mod_competvet"},{key:"grade",component:"mod_competvet"},{key:"comment",component:"mod_competvet"},{key:"date",component:"moodle"}]);csv.push([name,group,grade,comment,date]),rows.forEach((row=>{const student=row.querySelector('[data-region="studentname"]').textContent,planningid=row.dataset.planningid,planningrow=document.querySelector('tr.planning[data-planningid="'.concat(planningid,'"]')),group=planningrow.querySelector('[data-region="groupname"]').textContent,usergrade=row.querySelector('[data-region="usergrade"]'),grade=usergrade?usergrade.textContent:"",comment=row.querySelector('[data-region="comments"]').textContent,date=planningrow.dataset.startdate;csv.push([student,group,grade,'"'.concat(comment,'"'),date])}));const wb=_xlsxMini.default.utils.book_new(),ws=_xlsxMini.default.utils.aoa_to_sheet(csv);_xlsxMini.default.utils.book_append_sheet(wb,ws,"Plannings"),_xlsxMini.default.writeFile(wb,"plannings.xlsx")}}));

//# sourceMappingURL=plannings.min.js.map