{"version":3,"file":"grading_app_component.min.js","sources":["../../../src/local/grading/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the competvet Grading App UI.\n *\n * @module     mod_competvet/local/grading/grading_app_component\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Repository from '../new-repository';\nimport CompetState from '../competstate';\nimport '../helpers';\nimport './components/user_navigation';\nimport './components/evaluations_observations';\nimport './components/evaluations_grading';\nimport './components/list_grading';\nimport './components/globalgrade';\nimport './components/certification_grading';\nimport './components/certification_results';\nimport './components/list_results';\nimport './components/evaluation_results';\n\n/**\n * Constants for eval certif and list.\n */\nconst COMPETVET_CRITERIA_EVALUATION = 1;\nconst COMPETVET_CRITERIA_CERTIFICATION = 2;\nconst COMPETVET_CRITERIA_LIST = 3;\n\nclass Competvet {\n    /*\n     * The Grading App Element.\n     */\n    gradingApp;\n\n    /*\n    * The cmid.\n    */\n    competvet;\n\n    /*\n    * The Current User.\n    */\n    currentUser;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.cmId = this.gradingApp.dataset.cmId;\n        this.evalgrid = this.gradingApp.dataset.evalgrid;\n        this.certifgrid = this.gradingApp.dataset.certifgrid;\n        this.listgrid = this.gradingApp.dataset.listgrid;\n        this.planning = {\n            id: this.gradingApp.dataset.planningid,\n            cmid: this.cmId\n        };\n        CompetState.setValue('planning', this.planning);\n        this.userlist = [];\n        this.currentUser = 0;\n        this.setup();\n        this.addEventListeners();\n    }\n\n    /**\n     * Main render call.\n     */\n    async setup() {\n        await this.getUsers();\n        const currentUserId = this.gradingApp.dataset.studentid;\n        if (currentUserId && currentUserId !== '0') {\n            this.setCurrentUser(this.userlist.find(user => user.id === parseInt(currentUserId)));\n        } else {\n            this.setCurrentUser(this.userlist[0]);\n        }\n    }\n\n    /**\n     * Set the current user.\n     * @param {Object} user The user to set as current.\n     */\n    async setCurrentUser(user) {\n        this.gradingApp.dataset.studentid = user.id;\n        CompetState.setValue('user', user);\n        this.currentUser = user;\n\n        this.setEvalResults();\n        this.setCertifResults();\n        this.setListResults();\n\n        await this.setListGrading();\n\n        this.setGlobalGrade();\n        this.setForms();\n    }\n\n    async setEvalResults() {\n        const args = {\n            type: COMPETVET_CRITERIA_EVALUATION,\n            gridid: this.evalgrid\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n        CompetState.setValue('evaluation-results', context);\n    }\n\n    async setCertifResults() {\n        const args = {\n            type: COMPETVET_CRITERIA_CERTIFICATION,\n            gridid: this.certifgrid,\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n\n        // Get the certification results.\n        const certArgs = {\n            studentid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const certResponse = await Repository.getCertifResults(certArgs);\n\n        if (certResponse.criteria) {\n            // Match the criteria in the certResponse array with the criteria in the context on the criterionid.\n            // Add a attribute realised on the criteria in the context if the criterion is in the certResponse array.\n            context.criteria.forEach(criterion => {\n                const certCriterion = certResponse.criteria.find(\n                    certCriterion => certCriterion.criterionid === criterion.criterionid\n                );\n                if (certCriterion) {\n                    criterion.declid = certCriterion.declid;\n                    criterion.realised = certCriterion.status === 1;\n                    criterion.notrealised = certCriterion.status === 2;\n                }\n            });\n        }\n        CompetState.setValue('certification-results', context);\n    }\n\n    async setListResults() {\n        const args = {\n            userid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const response = await Repository.getListResults(args);\n        CompetState.setValue('list-results', response);\n    }\n\n    /**\n     * Get the list criteria.\n     */\n    async setListGrading() {\n        const args = {\n            type: COMPETVET_CRITERIA_LIST,\n            gridid: this.listgrid,\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            grading: {\n                'criteria': response.grids[0].criteria\n            }\n        };\n        CompetState.setValue('list-grading', context);\n    }\n\n    /**\n     * Get the list of users for grading.\n     */\n    async getUsers() {\n        const args = {\n            cmid: this.cmId,\n            roletype: 'student'\n        };\n        const response = await Repository.getUserList(args);\n        if (!response.users) {\n            return;\n        }\n        this.userlist = response.users;\n    }\n\n    /**\n     * Set the global grade.\n     */\n    async setGlobalGrade() {\n        const args = {\n            cmid: this.cmId,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getGlobalGrade(args);\n        if (!response.result) {\n            return;\n        }\n        CompetState.setValue('globalgrade', response.result);\n    }\n\n    /**\n     * Set the forms.\n     */\n    async setForms() {\n        const forms = ['evaluations-grading', 'certification-grading', 'list-grading'];\n        forms.forEach(async(formname) => {\n            const args = {\n                userid: this.currentUser.id,\n                planningid: this.gradingApp.dataset.planningid,\n                formname: formname\n            };\n            const response = await Repository.getFormData(args);\n            if (!response.result) {\n                return;\n            }\n            const context = {\n                grading: JSON.parse(response.data)\n            };\n            CompetState.setValue(formname, context);\n        });\n    }\n\n    /**\n     * Set the current user\n     * @param {string} direction The direction to move.\n     */\n    moveUser(direction) {\n        let index = this.userlist.indexOf(this.currentUser);\n        if (direction === 'prev' && index > 0) {\n            this.setCurrentUser(this.userlist[index - 1]);\n        } else if (direction === 'next' && index < this.userlist.length - 1) {\n            this.setCurrentUser(this.userlist[index + 1]);\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    addEventListeners() {\n        document.addEventListener('click', async(event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                this.moveUser('prev');\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                this.moveUser('next');\n            }\n            if (event.target.closest('[data-action=\"reload\"]')) {\n                this.getEvaluations();\n            }\n            if (event.target.closest('[data-action=\"delete-case\"]')) {\n                const button = event.target.closest('[data-action=\"delete-case\"]');\n                await Repository.deleteEntry({'entryid': button.dataset.id});\n                this.setListResults();\n            }\n        });\n        this.gradingApp.addEventListener('caseAdded', () => {\n            this.setListResults();\n        });\n        this.gradingApp.addEventListener('certAdded', () => {\n            this.setCertifResults();\n        });\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new Competvet();\n};\n\nexport default {\n    init: init,\n};"],"names":["Competvet","constructor","gradingApp","document","querySelector","cmId","this","dataset","evalgrid","certifgrid","listgrid","planning","id","planningid","cmid","setValue","userlist","currentUser","setup","addEventListeners","getUsers","currentUserId","studentid","setCurrentUser","find","user","parseInt","setEvalResults","setCertifResults","setListResults","setListGrading","setGlobalGrade","setForms","args","type","gridid","response","Repository","getCriteria","grids","context","criteria","certArgs","certResponse","getCertifResults","forEach","criterion","certCriterion","criterionid","declid","realised","status","notrealised","userid","getListResults","grading","roletype","getUserList","users","getGlobalGrade","result","async","formname","getFormData","JSON","parse","data","moveUser","direction","index","indexOf","length","addEventListener","event","target","closest","getEvaluations","button","deleteEntry","init"],"mappings":"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"}