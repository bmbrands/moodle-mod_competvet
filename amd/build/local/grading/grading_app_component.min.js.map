{"version":3,"file":"grading_app_component.min.js","sources":["../../../src/local/grading/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the competvet Grading App UI.\n *\n * @module     mod_competvet/local/grading/grading_app_component\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Repository from '../new-repository';\nimport CompetState from '../competstate';\nimport '../helpers';\nimport './components/auto_regions';\nimport './components/user_navigation';\nimport './components/evaluations_observations';\nimport './components/evaluations_grading';\nimport './components/list_grading';\nimport './components/globalgrade';\nimport './components/certification_grading';\nimport './components/certification_results';\nimport './components/list_results';\nimport './components/evaluation_results';\n\n/**\n * Constants for eval certif and list.\n */\n//const COMPETVET_CRITERIA_EVALUATION = 1;\nconst COMPETVET_CRITERIA_CERTIFICATION = 2;\nconst COMPETVET_CRITERIA_LIST = 3;\n\nclass Competvet {\n    /*\n     * The Grading App Element.\n     */\n    gradingApp;\n\n    /*\n    * The cmid.\n    */\n    competvet;\n\n    /*\n    * The Current User.\n    */\n    currentUser;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.cmId = this.gradingApp.dataset.cmId;\n        const planning = {\n            id: this.gradingApp.dataset.planningid,\n            cmid: this.cmId\n        };\n        CompetState.setValue('planning', planning);\n        this.userlist = [];\n        this.currentUser = 0;\n        this.setup();\n        this.addEventListeners();\n    }\n\n    /**\n     * Main render call.\n     */\n    async setup() {\n        await this.getUsers();\n        const currentUserId = this.gradingApp.dataset.studentid;\n        if (currentUserId && currentUserId !== '0') {\n            this.setCurrentUser(this.userlist.find(user => user.id === parseInt(currentUserId)));\n        } else {\n            this.setCurrentUser(this.userlist[0]);\n        }\n    }\n\n    /**\n     * Set the current user.\n     * @param {Object} user The user to set as current.\n     */\n    async setCurrentUser(user) {\n        CompetState.setValue('user', user);\n        this.currentUser = user;\n\n        this.setEvalResults();\n        this.setCertifResults();\n        this.setListResults();\n\n        await this.setListGrading();\n\n        this.setGlobalGrade();\n        this.setForms();\n    }\n\n    async setEvalResults() {\n        // THIS GETS THE RESULTS FROM THE JSON FILE.\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getEvaluationCriteria(args);\n        CompetState.setValue('evaluation-results', response);\n\n        // The COMMENTED OUT CODE IS FOR FUTURE USE.\n        // const args = {\n        //     type: COMPETVET_CRITERIA_EVALUATION\n        // };\n        // const response = await Repository.getCriteria(args);\n        // if (!response.grids) {\n        //     return;\n        // }\n        // const context = {\n        //     'criteria': response.grids[0].criteria\n        // };\n        // CompetState.setValue('evaluation-results', context);\n    }\n\n    async setCertifResults() {\n        const args = {\n            type: COMPETVET_CRITERIA_CERTIFICATION\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n        CompetState.setValue('certification-results', context);\n    }\n\n    async setListResults() {\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getListResults(args);\n        CompetState.setValue('list-results', response);\n    }\n\n    /**\n     * Get the list criteria.\n     */\n    async setListGrading() {\n        const args = {\n            type: COMPETVET_CRITERIA_LIST\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n        CompetState.setValue('list-grading', context);\n    }\n\n    /**\n     * Get the list of users for grading.\n     */\n    async getUsers() {\n        const args = {\n            cmid: this.cmId,\n            roletype: 'student'\n        };\n        const response = await Repository.getUserList(args);\n        if (!response.users) {\n            return;\n        }\n        this.userlist = response.users;\n    }\n\n    /**\n     * Set the global grade.\n     */\n    async setGlobalGrade() {\n        const args = {\n            cmid: this.cmId,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getGlobalGrade(args);\n        if (!response.globalgrade) {\n            return;\n        }\n        CompetState.setValue('globalgrade', response.globalgrade);\n    }\n\n    /**\n     * Set the forms.\n     */\n    async setForms() {\n        const forms = ['evaluations-grading', 'certification-grading'];\n        forms.forEach(async(formname) => {\n            const args = {\n                userid: this.currentUser.id,\n                planningid: this.gradingApp.dataset.planningid,\n                formname: formname\n            };\n            const response = await Repository.getFormData(args);\n            if (!response.result) {\n                return;\n            }\n            const context = {\n                grading: JSON.parse(response.data)\n            };\n            CompetState.setValue(formname, context);\n        });\n    }\n\n    /**\n     * Set the current user\n     * @param {string} direction The direction to move.\n     */\n    moveUser(direction) {\n        let index = this.userlist.indexOf(this.currentUser);\n        if (direction === 'prev' && index > 0) {\n            this.setCurrentUser(this.userlist[index - 1]);\n        } else if (direction === 'next' && index < this.userlist.length - 1) {\n            this.setCurrentUser(this.userlist[index + 1]);\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    addEventListeners() {\n        document.addEventListener('click', (event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                this.moveUser('prev');\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                this.moveUser('next');\n            }\n            if (event.target.closest('[data-action=\"reload\"]')) {\n                this.getEvaluations();\n            }\n        });\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new Competvet();\n};\n\nexport default {\n    init: init,\n};"],"names":["Competvet","constructor","gradingApp","document","querySelector","cmId","this","dataset","planning","id","planningid","cmid","setValue","userlist","currentUser","setup","addEventListeners","getUsers","currentUserId","studentid","setCurrentUser","find","user","parseInt","setEvalResults","setCertifResults","setListResults","setListGrading","setGlobalGrade","setForms","args","userid","response","Repository","getEvaluationCriteria","type","getCriteria","grids","context","criteria","getListResults","roletype","getUserList","users","getGlobalGrade","globalgrade","forEach","async","formname","getFormData","result","grading","JSON","parse","data","moveUser","direction","index","indexOf","length","addEventListener","event","target","closest","getEvaluations","init"],"mappings":"omCA2CMA,UAmBFC,iJACSC,WAAaC,SAASC,cAAc,oCACpCC,KAAOC,KAAKJ,WAAWK,QAAQF,WAC9BG,SAAW,CACbC,GAAIH,KAAKJ,WAAWK,QAAQG,WAC5BC,KAAML,KAAKD,2BAEHO,SAAS,WAAYJ,eAC5BK,SAAW,QACXC,YAAc,OACdC,aACAC,wCAOCV,KAAKW,iBACLC,cAAgBZ,KAAKJ,WAAWK,QAAQY,UAC1CD,eAAmC,MAAlBA,mBACZE,eAAed,KAAKO,SAASQ,MAAKC,MAAQA,KAAKb,KAAOc,SAASL,uBAE/DE,eAAed,KAAKO,SAAS,yBAQrBS,2BACLV,SAAS,OAAQU,WACxBR,YAAcQ,UAEdE,sBACAC,wBACAC,uBAECpB,KAAKqB,sBAENC,sBACAC,wCAKCC,KAAO,CACTC,OAAQzB,KAAKQ,YAAYL,GACzBE,KAAML,KAAKD,MAET2B,eAAiBC,uBAAWC,sBAAsBJ,2BAC5ClB,SAAS,qBAAsBoB,yCAiBrCF,KAAO,CACTK,KA5F6B,GA8F3BH,eAAiBC,uBAAWG,YAAYN,UACzCE,SAASK,mBAGRC,QAAU,UACAN,SAASK,MAAM,GAAGE,+BAEtB3B,SAAS,wBAAyB0B,sCAIxCR,KAAO,CACTC,OAAQzB,KAAKQ,YAAYL,GACzBE,KAAML,KAAKD,MAET2B,eAAiBC,uBAAWO,eAAeV,2BACrClB,SAAS,eAAgBoB,uCAO/BF,KAAO,CACTK,KArHoB,GAuHlBH,eAAiBC,uBAAWG,YAAYN,UACzCE,SAASK,mBAGRC,QAAU,UACAN,SAASK,MAAM,GAAGE,+BAEtB3B,SAAS,eAAgB0B,gCAO/BR,KAAO,CACTnB,KAAML,KAAKD,KACXoC,SAAU,WAERT,eAAiBC,uBAAWS,YAAYZ,MACzCE,SAASW,aAGT9B,SAAWmB,SAASW,oCAOnBb,KAAO,CACTnB,KAAML,KAAKD,KACX0B,OAAQzB,KAAKQ,YAAYL,IAEvBuB,eAAiBC,uBAAWW,eAAed,MAC5CE,SAASa,kCAGFjC,SAAS,cAAeoB,SAASa,8BAO/B,CAAC,sBAAuB,yBAChCC,SAAQC,MAAAA,iBACJjB,KAAO,CACTC,OAAQzB,KAAKQ,YAAYL,GACzBC,WAAYJ,KAAKJ,WAAWK,QAAQG,WACpCsC,SAAUA,UAERhB,eAAiBC,uBAAWgB,YAAYnB,UACzCE,SAASkB,oBAGRZ,QAAU,CACZa,QAASC,KAAKC,MAAMrB,SAASsB,4BAErB1C,SAASoC,SAAUV,YAQvCiB,SAASC,eACDC,MAAQnD,KAAKO,SAAS6C,QAAQpD,KAAKQ,aACrB,SAAd0C,WAAwBC,MAAQ,OAC3BrC,eAAed,KAAKO,SAAS4C,MAAQ,IACrB,SAAdD,WAAwBC,MAAQnD,KAAKO,SAAS8C,OAAS,QACzDvC,eAAed,KAAKO,SAAS4C,MAAQ,IAOlDzC,oBACIb,SAASyD,iBAAiB,SAAUC,QAC5BA,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,gCAChBC,kCAcN,CACXC,KALS,SACLjE"}