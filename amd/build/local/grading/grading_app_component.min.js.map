{"version":3,"file":"grading_app_component.min.js","sources":["../../../src/local/grading/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the competvet Grading App UI.\n *\n * @module     mod_competvet/local/grading/grading_app_component\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Repository from '../new-repository';\nimport CompetState from '../competstate';\nimport './components/user_navigation';\nimport './components/evaluations_grading';\nimport './components/list_grading';\nimport './components/globalgrade';\nimport './components/certification_grading';\nimport './components/certification_results';\nimport './components/list_results';\nimport './components/evaluation_results';\nimport './components/evaluation_chart';\nimport './components/subgrades';\n\n/**\n * Constants for eval certif and list.\n */\nconst COMPETVET_CRITERIA_LIST = 3;\n\n\nclass Competvet {\n    /*\n     * The Grading App Element.\n     */\n    gradingApp;\n\n    /*\n    * The cmid.\n    */\n    competvet;\n\n    /*\n    * The Current User.\n    */\n    currentUser;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.cmId = this.gradingApp.dataset.cmId;\n        this.evalgrid = this.gradingApp.dataset.evalgrid;\n        this.certifgrid = this.gradingApp.dataset.certifgrid;\n        this.listgrid = this.gradingApp.dataset.listgrid;\n        this.planning = {\n            id: this.gradingApp.dataset.planningid,\n            cmid: this.cmId,\n        };\n        CompetState.setValue('planning', this.planning);\n        this.userlist = [];\n        this.currentUser = 0;\n        this.setup();\n        this.addEventListeners();\n    }\n\n    /**\n     * Main render call.\n     */\n    async setup() {\n        await this.getUsers();\n        const currentUserId = this.gradingApp.dataset.studentid;\n        if (currentUserId && currentUserId !== '0') {\n            this.setCurrentUser(this.userlist.find(user => user.id === parseInt(currentUserId)));\n        } else {\n            this.setCurrentUser(this.userlist[0]);\n        }\n    }\n\n    /**\n     * Set the current user.\n     * @param {Object} user The user to set as current.\n     */\n    async setCurrentUser(user) {\n        this.gradingApp.dataset.studentid = user.id;\n        CompetState.setValue('user', user);\n        this.currentUser = user;\n\n        this.setEvalResults();\n        this.setCertifResults();\n        this.setListResults();\n\n        await this.setListGrading();\n        await this.setSubGrades();\n        await this.setGlobalGrade();\n        await this.setForms();\n        this.setSuggestedGrade();\n        this.setStateFormValues();\n    }\n\n    async setEvalResults() {\n        const args = {\n            studentid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const evalResponse = await Repository.getEvalResults(args);\n        CompetState.setValue('evaluation-results', evalResponse);\n        CompetState.setValue('evaluation-chart', evalResponse);\n    }\n\n    async setCertifResults() {\n        const args = {\n            studentid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const certResponse = await Repository.getCertifResults(args);\n        CompetState.setValue('certification-results', certResponse);\n    }\n\n    async setListResults() {\n        const args = {\n            userid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const response = await Repository.getListResults(args);\n        CompetState.setValue('list-results', response);\n    }\n\n    /**\n     * Get the list criteria.\n     */\n    async setListGrading() {\n        const args = {\n            type: COMPETVET_CRITERIA_LIST,\n            gridid: this.listgrid,\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            grading: {\n                'criteria': response.grids[0].criteria,\n                'timemodified': response.grids[0].timemodified,\n            }\n        };\n        context.grading.criteria.forEach(criterion => {\n            // Set the option with the second sortorder as the default selected option.\n            criterion.options[1].selected = true;\n        });\n        CompetState.setValue('list-grading', context);\n    }\n\n    /**\n     * Get the list of users for grading.\n     */\n    async getUsers() {\n        const args = {\n            planningid: this.planning.id\n        };\n        const response = await Repository.getUserList(args);\n        if (!response.users) {\n            return;\n        }\n        this.userlist = response.users;\n        CompetState.setValue('userlist', this.userlist);\n    }\n\n    /**\n     * Set the global grade.\n     */\n    async setGlobalGrade() {\n        const args = {\n            cmid: this.cmId,\n            planningid: this.planning.id,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getGlobalGrade(args);\n        if (!response.result) {\n            return;\n        }\n        response.result.hideaccept = true;\n        CompetState.setValue('globalgrade', response.result);\n    }\n\n    /**\n     * Set the subgrades.\n     */\n    async setSubGrades() {\n        const args = {\n            studentid: this.currentUser.id,\n            planningid: this.planning.id\n        };\n        const response = await Repository.getSubGrades(args);\n        CompetState.setValue('subgrades', response);\n    }\n\n    /**\n     * Set the suggested grade.\n     */\n    async setSuggestedGrade() {\n        const suggestedArgs = {\n            studentid: this.currentUser.id,\n            planningid: this.planning.id,\n        };\n        const globalGrade = CompetState.getValue('globalgrade');\n        const response = await Repository.getSuggestedGrade(suggestedArgs);\n        globalGrade.suggestedgrade = response.suggestedgrade;\n        globalGrade.gradecalculation = response.gradecalculation;\n        globalGrade.hideaccept = response.suggestedgrade == 0 || response.suggestedgrade == globalGrade.finalgrade;\n        CompetState.setValue('globalgrade', globalGrade);\n    }\n\n    /**\n     * Set the forms.\n     */\n    async setForms() {\n        const forms = ['evaluations-grading', 'certification-grading', 'list-grading'];\n        await Promise.all(forms.map(async(formname) => {\n            const args = {\n                userid: this.currentUser.id,\n                planningid: this.gradingApp.dataset.planningid,\n                formname: formname\n            };\n            const response = await Repository.getFormData(args);\n            if (!response.result) {\n                return;\n            }\n            const context = {\n                grading: JSON.parse(response.data)\n            };\n            // For the list-grading we need to check the timemodified against the stored form timemodified.\n            if (formname === 'list-grading') {\n                const listGrading = CompetState.getValue('list-grading');\n                if (listGrading.grading.timemodified > response.timemodified) {\n                    window.console.log('List grading form is outdated:' + listGrading.grading.timemodified +\n                        ' ' + response.timemodified);\n                    return;\n                }\n            }\n\n            CompetState.setValue(formname, context);\n        }));\n    }\n\n    /**\n     * Specific form values fetched from other state values.\n     */\n    setStateFormValues() {\n        const certifGrading = CompetState.getValue('certification-grading');\n        const certifResults = CompetState.getValue('certification-results');\n        // Update the values numcertifvalidated and maxcertifvalidated based on the certification-results\n        certifGrading.grading.maxcertifvalidated = certifResults.certifications.length;\n        certifGrading.grading.numcertifvalidated = certifResults.certifications.filter(cert => cert.validated === true).length;\n        certifGrading.grading.statusproposed = false;\n        if (certifGrading.grading.maxcertifvalidated === certifGrading.grading.numcertifvalidated\n            && certifGrading.grading.maxcertifvalidated > 0) {\n                certifGrading.grading.statusproposed = true;\n        }\n\n        const evalGrading = CompetState.getValue('evaluations-grading');\n        const evalResults = CompetState.getValue('evaluation-results');\n        // Update the values numberofobservations and maxobservations based on the evaluation-results\n        evalGrading.grading.evalnum = this.gradingApp.dataset.evalnum;\n        let totalEvalScore = 0;\n        let totalGrades = 0;\n        let numberofobservations = 0;\n        let numberofselfevaluations = 0;\n        if (evalResults.evaluations.length > 0) {\n            evalResults.evaluations[0].grades.forEach(grade => {\n                if (grade.graderinfo.id == this.currentUser.id) {\n                    numberofselfevaluations++;\n                    return;\n                }\n                numberofobservations++;\n            });\n        }\n        if (numberofselfevaluations > 0) {\n            evalGrading.grading.selfevalselectoptions[1].selected = true;\n        }\n        evalGrading.grading.numberofobservations = numberofobservations;\n        evalGrading.grading.haspenalty = evalGrading.grading.evalnum > numberofobservations;\n        evalResults.evaluations.forEach(evaluation => {\n            evaluation.grades.forEach(grade => {\n                if (grade.level === null || grade.graderinfo.id == this.currentUser.id) {\n                    return;\n                }\n                totalEvalScore += grade.level;\n                totalGrades++;\n            });\n        });\n        evalGrading.grading.evalscore = totalGrades > 0 ? Math.round(totalEvalScore / totalGrades) : 0;\n        // Set the average evalscore based on the evaluation-results\n    }\n\n    /**\n     * Set the current user\n     * @param {string} direction The direction to move.\n     */\n    moveUser(direction) {\n        let index = this.userlist.indexOf(this.currentUser);\n        if (direction === 'prev' && index > 0) {\n            this.setCurrentUser(this.userlist[index - 1]);\n        } else if (direction === 'next' && index < this.userlist.length - 1) {\n            this.setCurrentUser(this.userlist[index + 1]);\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    addEventListeners() {\n        document.addEventListener('click', async(event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                this.moveUser('prev');\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                this.moveUser('next');\n            }\n            if (event.target.closest('[data-action=\"setuser\"]')) {\n                const userId = event.target.closest('[data-action=\"setuser\"]').dataset.userid;\n                this.setCurrentUser(this.userlist.find(user => user.id === parseInt(userId)));\n            }\n            if (event.target.closest('[data-action=\"reload\"]')) {\n                this.getEvaluations();\n            }\n        });\n        this.gradingApp.addEventListener('certAdded', () => {\n            this.setCertifResults();\n        });\n        this.gradingApp.addEventListener('setSuggestedGrade', async() => {\n            // Update the suggested grade.\n            this.setSubGrades();\n            this.setSuggestedGrade();\n        });\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new Competvet();\n};\n\nexport default {\n    init: init,\n};"],"names":["Competvet","constructor","gradingApp","document","querySelector","cmId","this","dataset","evalgrid","certifgrid","listgrid","planning","id","planningid","cmid","setValue","userlist","currentUser","setup","addEventListeners","getUsers","currentUserId","studentid","setCurrentUser","find","user","parseInt","setEvalResults","setCertifResults","setListResults","setListGrading","setSubGrades","setGlobalGrade","setForms","setSuggestedGrade","setStateFormValues","args","evalResponse","Repository","getEvalResults","certResponse","getCertifResults","userid","response","getListResults","type","gridid","getCriteria","grids","context","grading","criteria","timemodified","forEach","criterion","options","selected","getUserList","users","getGlobalGrade","result","hideaccept","getSubGrades","suggestedArgs","globalGrade","CompetState","getValue","getSuggestedGrade","suggestedgrade","gradecalculation","finalgrade","Promise","all","map","async","formname","getFormData","JSON","parse","data","listGrading","window","console","log","certifGrading","certifResults","maxcertifvalidated","certifications","length","numcertifvalidated","filter","cert","validated","statusproposed","evalGrading","evalResults","evalnum","totalEvalScore","totalGrades","numberofobservations","numberofselfevaluations","evaluations","grades","grade","graderinfo","selfevalselectoptions","haspenalty","evaluation","level","evalscore","Math","round","moveUser","direction","index","indexOf","addEventListener","event","target","closest","userId","getEvaluations","init"],"mappings":"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"}