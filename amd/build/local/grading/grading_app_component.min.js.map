{"version":3,"file":"grading_app_component.min.js","sources":["../../../src/local/grading/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the competvet Grading App UI.\n *\n * @module     mod_competvet/local/grading/grading_app_component\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Repository from '../new-repository';\nimport CompetState from '../competstate';\nimport '../helpers';\nimport './components/auto_regions';\nimport './components/user_navigation';\nimport './components/evaluations_observations';\nimport './components/evaluations_grading';\nimport './components/list_criteria';\nimport './components/globalgrade';\nimport './components/certification_grading';\nimport './components/certification_results';\nimport './components/list_results';\nimport './components/evaluation_results';\n\n/**\n * Constants for eval certif and list.\n */\n//const COMPETVET_CRITERIA_EVALUATION = 1;\nconst COMPETVET_CRITERIA_CERTIFICATION = 2;\nconst COMPETVET_CRITERIA_LIST = 3;\n\nclass Competvet {\n    /*\n     * The Grading App Element.\n     */\n    gradingApp;\n\n    /*\n    * The cmid.\n    */\n    competvet;\n\n    /*\n    * The Current User.\n    */\n    currentUser;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.cmId = this.gradingApp.dataset.cmId;\n        this.userlist = [];\n        this.currentUser = 0;\n        this.setup();\n        this.addEventListeners();\n    }\n\n    /**\n     * Main render call.\n     */\n    async setup() {\n        await this.getUsers();\n        const currentUserId = this.gradingApp.dataset.studentid;\n        if (currentUserId && currentUserId !== '0') {\n            this.setCurrentUser(this.userlist.find(user => user.id === parseInt(currentUserId)));\n        } else {\n            this.setCurrentUser(this.userlist[0]);\n        }\n    }\n\n    /**\n     * Set the current user.\n     * @param {Object} user The user to set as current.\n     */\n    setCurrentUser(user) {\n        CompetState.setValue('user', user);\n        this.currentUser = user;\n\n        this.setEvalResults();\n        this.setEvalGrading();\n\n        this.setCertifResults();\n        this.setCertifGrading();\n\n        this.setListResults();\n        this.setListGrading();\n\n        this.setGlobalGrade();\n\n    }\n\n    async setEvalResults() {\n        // THIS GETS THE RESULTS FROM THE JSON FILE.\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getEvaluationCriteria(args);\n        CompetState.setValue('evaluation-results', response);\n\n        // The COMMENTED OUT CODE IS FOR FUTURE USE.\n        // const args = {\n        //     type: COMPETVET_CRITERIA_EVALUATION\n        // };\n        // const response = await Repository.getCriteria(args);\n        // if (!response.grids) {\n        //     return;\n        // }\n        // const context = {\n        //     'criteria': response.grids[0].criteria\n        // };\n        // CompetState.setValue('evaluation-results', context);\n    }\n\n    /**\n     * Set the Evaluation grading.\n     */\n    async setEvalGrading() {\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getEvaluationGrading(args);\n        if (!response.evaluationsgrading) {\n            return;\n        }\n        const context = {\n            'grading': response.evaluationsgrading\n        };\n        CompetState.setValue('evaluations-grading', context);\n    }\n\n    async setCertifResults() {\n        const args = {\n            type: COMPETVET_CRITERIA_CERTIFICATION\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n        CompetState.setValue('certification-results', context);\n    }\n\n    /**\n     * Set the Certification grading.\n     */\n    async setCertifGrading() {\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getCertificationGrading(args);\n        if (!response.certifgrading) {\n            return;\n        }\n        const context = {\n            'grading': response.certifgrading\n        };\n        CompetState.setValue('certification-grading', context);\n    }\n\n    async setListResults() {\n        const args = {\n            userid: this.currentUser.id,\n            cmid: this.cmId\n        };\n        const response = await Repository.getListResults(args);\n        CompetState.setValue('list-results', response);\n    }\n\n    /**\n     * Get the list criteria.\n     */\n    async setListGrading() {\n        const args = {\n            type: COMPETVET_CRITERIA_LIST\n        };\n        const response = await Repository.getCriteria(args);\n        if (!response.grids) {\n            return;\n        }\n        const context = {\n            'criteria': response.grids[0].criteria\n        };\n        CompetState.setValue('list-criteria', context);\n    }\n\n    /**\n     * Get the list of users for grading.\n     */\n    async getUsers() {\n        const args = {\n            cmid: this.cmId,\n            roletype: 'student'\n        };\n        const response = await Repository.getUserList(args);\n        if (!response.users) {\n            return;\n        }\n        this.userlist = response.users;\n    }\n\n    /**\n     * Set the global grade.\n     */\n    async setGlobalGrade() {\n        const args = {\n            cmid: this.cmId,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getGlobalGrade(args);\n        if (!response.globalgrade) {\n            return;\n        }\n        CompetState.setValue('globalgrade', response.globalgrade);\n    }\n\n    /**\n     * Set the current user\n     * @param {string} direction The direction to move.\n     */\n    moveUser(direction) {\n        let index = this.userlist.indexOf(this.currentUser);\n        if (direction === 'prev' && index > 0) {\n            this.setCurrentUser(this.userlist[index - 1]);\n        } else if (direction === 'next' && index < this.userlist.length - 1) {\n            this.setCurrentUser(this.userlist[index + 1]);\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    addEventListeners() {\n        document.addEventListener('click', (event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                this.moveUser('prev');\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                this.moveUser('next');\n            }\n            if (event.target.closest('[data-action=\"reload\"]')) {\n                this.getEvaluations();\n            }\n        });\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new Competvet();\n};\n\nexport default {\n    init: init,\n};"],"names":["Competvet","constructor","gradingApp","document","querySelector","cmId","this","dataset","userlist","currentUser","setup","addEventListeners","getUsers","currentUserId","studentid","setCurrentUser","find","user","id","parseInt","setValue","setEvalResults","setEvalGrading","setCertifResults","setCertifGrading","setListResults","setListGrading","setGlobalGrade","args","userid","cmid","response","Repository","getEvaluationCriteria","getEvaluationGrading","evaluationsgrading","context","type","getCriteria","grids","criteria","getCertificationGrading","certifgrading","getListResults","roletype","getUserList","users","getGlobalGrade","globalgrade","moveUser","direction","index","indexOf","length","addEventListener","event","target","closest","getEvaluations","init"],"mappings":"smCA2CMA,UAmBFC,iJACSC,WAAaC,SAASC,cAAc,oCACpCC,KAAOC,KAAKJ,WAAWK,QAAQF,UAC/BG,SAAW,QACXC,YAAc,OACdC,aACAC,wCAOCL,KAAKM,iBACLC,cAAgBP,KAAKJ,WAAWK,QAAQO,UAC1CD,eAAmC,MAAlBA,mBACZE,eAAeT,KAAKE,SAASQ,MAAKC,MAAQA,KAAKC,KAAOC,SAASN,uBAE/DE,eAAeT,KAAKE,SAAS,IAQ1CO,eAAeE,2BACCG,SAAS,OAAQH,WACxBR,YAAcQ,UAEdI,sBACAC,sBAEAC,wBACAC,wBAEAC,sBACAC,sBAEAC,8CAMCC,KAAO,CACTC,OAAQvB,KAAKG,YAAYS,GACzBY,KAAMxB,KAAKD,MAET0B,eAAiBC,uBAAWC,sBAAsBL,2BAC5CR,SAAS,qBAAsBW,uCAoBrCH,KAAO,CACTC,OAAQvB,KAAKG,YAAYS,GACzBY,KAAMxB,KAAKD,MAET0B,eAAiBC,uBAAWE,qBAAqBN,UAClDG,SAASI,gCAGRC,QAAU,SACDL,SAASI,yCAEZf,SAAS,sBAAuBgB,wCAItCR,KAAO,CACTS,KA5G6B,GA8G3BN,eAAiBC,uBAAWM,YAAYV,UACzCG,SAASQ,mBAGRH,QAAU,UACAL,SAASQ,MAAM,GAAGC,+BAEtBpB,SAAS,wBAAyBgB,wCAOxCR,KAAO,CACTC,OAAQvB,KAAKG,YAAYS,GACzBY,KAAMxB,KAAKD,MAET0B,eAAiBC,uBAAWS,wBAAwBb,UACrDG,SAASW,2BAGRN,QAAU,SACDL,SAASW,oCAEZtB,SAAS,wBAAyBgB,sCAIxCR,KAAO,CACTC,OAAQvB,KAAKG,YAAYS,GACzBY,KAAMxB,KAAKD,MAET0B,eAAiBC,uBAAWW,eAAef,2BACrCR,SAAS,eAAgBW,uCAO/BH,KAAO,CACTS,KAvJoB,GAyJlBN,eAAiBC,uBAAWM,YAAYV,UACzCG,SAASQ,mBAGRH,QAAU,UACAL,SAASQ,MAAM,GAAGC,+BAEtBpB,SAAS,gBAAiBgB,gCAOhCR,KAAO,CACTE,KAAMxB,KAAKD,KACXuC,SAAU,WAERb,eAAiBC,uBAAWa,YAAYjB,MACzCG,SAASe,aAGTtC,SAAWuB,SAASe,oCAOnBlB,KAAO,CACTE,KAAMxB,KAAKD,KACXwB,OAAQvB,KAAKG,YAAYS,IAEvBa,eAAiBC,uBAAWe,eAAenB,MAC5CG,SAASiB,kCAGF5B,SAAS,cAAeW,SAASiB,aAOjDC,SAASC,eACDC,MAAQ7C,KAAKE,SAAS4C,QAAQ9C,KAAKG,aACrB,SAAdyC,WAAwBC,MAAQ,OAC3BpC,eAAeT,KAAKE,SAAS2C,MAAQ,IACrB,SAAdD,WAAwBC,MAAQ7C,KAAKE,SAAS6C,OAAS,QACzDtC,eAAeT,KAAKE,SAAS2C,MAAQ,IAOlDxC,oBACIR,SAASmD,iBAAiB,SAAUC,QAC5BA,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,gCAChBC,kCAcN,CACXC,KALS,SACL3D"}