{"version":3,"file":"grading_app_component.min.js","sources":["../../../src/local/grading/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the competvet Grading App UI.\n *\n * @module     mod_competvet/local/grading/grading_app_component\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Repository from '../new-repository';\nimport CompetState from '../competstate';\nimport '../helpers';\nimport './components/auto_regions';\nimport './components/user_navigation';\nimport './components/evaluations_observations';\nimport './components/evaluations_comments';\nimport './components/evaluations_grading';\nimport './components/list_criteria';\nimport './components/globalgrade';\n\nclass Competvet {\n    /*\n     * The Grading App Element.\n     */\n    gradingApp;\n\n    /*\n    * The cmid.\n    */\n    competvet;\n\n    /*\n    * The Current User.\n    */\n    currentUser;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n        this.cmId = this.gradingApp.dataset.cmId;\n        this.planningId = this.gradingApp.dataset.planningid;\n        this.userlist = [];\n        this.currentUser = 0;\n        this.setup();\n        this.addEventListeners();\n    }\n\n    /**\n     * Main render call.\n     */\n    async setup() {\n        await this.getUsers();\n        const currentUserId = this.gradingApp.dataset.studentid;\n        if (currentUserId && currentUserId !== '0') {\n            this.setCurrentUser(this.userlist.find(user => user.id === parseInt(currentUserId)));\n        } else {\n            this.setCurrentUser(this.userlist[0]);\n        }\n    }\n\n    /**\n     * Set the current user.\n     * @param {Object} user The user to set as current.\n     */\n    setCurrentUser(user) {\n        CompetState.setValue('user', user);\n        this.currentUser = user;\n        this.setEvalObservations();\n        this.setEvalGrading();\n        this.setListCriteria();\n        this.setGlobalGrade();\n    }\n\n    /**\n     * Get the list of users for grading.\n     */\n    async getUsers() {\n        const args = {\n            cmid: this.cmId,\n            roletype: 'student'\n        };\n        const response = await Repository.getUserList(args);\n        if (!response.users) {\n            return;\n        }\n        this.userlist = response.users;\n    }\n\n    /**\n     * Get the Evaluations.\n     */\n    async setEvalObservations() {\n        const args = {\n            userid: this.currentUser.id,\n            planningid: this.planningId\n        };\n        const response = await Repository.getEvaluations(args);\n        if (!response.evaluations) {\n            return;\n        }\n        const context = {\n            'observations': response.evaluations,\n            'comments': response.comments\n        };\n        CompetState.setValue('evaluations-observations', context);\n        CompetState.setValue('evaluations-comments', context);\n    }\n\n    /**\n     * Set the Evaluation grading.\n     */\n    async setEvalGrading() {\n        const args = {\n            userid: this.currentUser.id,\n            planningid: this.planningId\n        };\n        const response = await Repository.getEvaluationGrading(args);\n        if (!response.evaluationsgrading) {\n            return;\n        }\n        const context = {\n            'grading': response.evaluationsgrading\n        };\n        CompetState.setValue('evaluations-grading', context);\n    }\n\n    /**\n     * Get the list criteria.\n     */\n    async setListCriteria() {\n        const args = {\n            cmid: this.cmId,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getListCriteria(args);\n        if (!response.criteria) {\n            return;\n        }\n        const context = {\n            'criteria': response.criteria\n        };\n        CompetState.setValue('list-criteria', context);\n    }\n\n    /**\n     * Set the global grade.\n     */\n    async setGlobalGrade() {\n        const args = {\n            cmid: this.cmId,\n            userid: this.currentUser.id\n        };\n        const response = await Repository.getGlobalGrade(args);\n        if (!response.globalgrade) {\n            return;\n        }\n        CompetState.setValue('globalgrade', response.globalgrade);\n    }\n\n    /**\n     * Set the current user\n     * @param {string} direction The direction to move.\n     */\n    moveUser(direction) {\n        let index = this.userlist.indexOf(this.currentUser);\n        if (direction === 'prev' && index > 0) {\n            this.setCurrentUser(this.userlist[index - 1]);\n        } else if (direction === 'next' && index < this.userlist.length - 1) {\n            this.setCurrentUser(this.userlist[index + 1]);\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    addEventListeners() {\n        document.addEventListener('click', (event) => {\n            if (event.target.closest('[data-action=\"prevuser\"]')) {\n                this.moveUser('prev');\n            }\n            if (event.target.closest('[data-action=\"nextuser\"]')) {\n                this.moveUser('next');\n            }\n            if (event.target.closest('[data-action=\"reload\"]')) {\n                this.getEvaluations();\n            }\n        });\n    }\n}\n\n/*\n * Initialise the criteria management.\n *\n */\nconst init = () => {\n    new Competvet();\n};\n\nexport default {\n    init: init,\n};"],"names":["Competvet","constructor","gradingApp","document","querySelector","cmId","this","dataset","planningId","planningid","userlist","currentUser","setup","addEventListeners","getUsers","currentUserId","studentid","setCurrentUser","find","user","id","parseInt","setValue","setEvalObservations","setEvalGrading","setListCriteria","setGlobalGrade","args","cmid","roletype","response","Repository","getUserList","users","userid","getEvaluations","evaluations","context","comments","getEvaluationGrading","evaluationsgrading","getListCriteria","criteria","getGlobalGrade","globalgrade","moveUser","direction","index","indexOf","length","addEventListener","event","target","closest","init"],"mappings":"w8BAiCMA,UAmBFC,iJACSC,WAAaC,SAASC,cAAc,oCACpCC,KAAOC,KAAKJ,WAAWK,QAAQF,UAC/BG,WAAaF,KAAKJ,WAAWK,QAAQE,gBACrCC,SAAW,QACXC,YAAc,OACdC,aACAC,wCAOCP,KAAKQ,iBACLC,cAAgBT,KAAKJ,WAAWK,QAAQS,UAC1CD,eAAmC,MAAlBA,mBACZE,eAAeX,KAAKI,SAASQ,MAAKC,MAAQA,KAAKC,KAAOC,SAASN,uBAE/DE,eAAeX,KAAKI,SAAS,IAQ1CO,eAAeE,2BACCG,SAAS,OAAQH,WACxBR,YAAcQ,UACdI,2BACAC,sBACAC,uBACAC,wCAOCC,KAAO,CACTC,KAAMtB,KAAKD,KACXwB,SAAU,WAERC,eAAiBC,uBAAWC,YAAYL,MACzCG,SAASG,aAGTvB,SAAWoB,SAASG,yCAOnBN,KAAO,CACTO,OAAQ5B,KAAKK,YAAYS,GACzBX,WAAYH,KAAKE,YAEfsB,eAAiBC,uBAAWI,eAAeR,UAC5CG,SAASM,yBAGRC,QAAU,cACIP,SAASM,qBACbN,SAASQ,+BAEbhB,SAAS,2BAA4Be,8BACrCf,SAAS,uBAAwBe,sCAOvCV,KAAO,CACTO,OAAQ5B,KAAKK,YAAYS,GACzBX,WAAYH,KAAKE,YAEfsB,eAAiBC,uBAAWQ,qBAAqBZ,UAClDG,SAASU,gCAGRH,QAAU,SACDP,SAASU,yCAEZlB,SAAS,sBAAuBe,uCAOtCV,KAAO,CACTC,KAAMtB,KAAKD,KACX6B,OAAQ5B,KAAKK,YAAYS,IAEvBU,eAAiBC,uBAAWU,gBAAgBd,UAC7CG,SAASY,sBAGRL,QAAU,UACAP,SAASY,+BAEbpB,SAAS,gBAAiBe,sCAOhCV,KAAO,CACTC,KAAMtB,KAAKD,KACX6B,OAAQ5B,KAAKK,YAAYS,IAEvBU,eAAiBC,uBAAWY,eAAehB,MAC5CG,SAASc,kCAGFtB,SAAS,cAAeQ,SAASc,aAOjDC,SAASC,eACDC,MAAQzC,KAAKI,SAASsC,QAAQ1C,KAAKK,aACrB,SAAdmC,WAAwBC,MAAQ,OAC3B9B,eAAeX,KAAKI,SAASqC,MAAQ,IACrB,SAAdD,WAAwBC,MAAQzC,KAAKI,SAASuC,OAAS,QACzDhC,eAAeX,KAAKI,SAASqC,MAAQ,IAOlDlC,oBACIV,SAAS+C,iBAAiB,SAAUC,QAC5BA,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,kCAChBR,SAAS,QAEdM,MAAMC,OAAOC,QAAQ,gCAChBlB,kCAcN,CACXmB,KALS,SACLtD"}