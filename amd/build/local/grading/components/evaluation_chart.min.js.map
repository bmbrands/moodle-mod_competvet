{"version":3,"file":"evaluation_chart.min.js","sources":["../../../../src/local/grading/components/evaluation_chart.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the evaluation chart.\n *\n * @module     mod_competvet/local/grading/components/evaluation_chart\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport ChartJS from 'core/chartjs';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\n/*\n* Define the evaluation chart template.\n*/\nconst stateTemplate = () => {\n    const templateName = 'evaluation-chart';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = async(context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        Templates.render(template, context).then(async(html) => {\n            region.innerHTML = html;\n            const canvas = document.getElementById('evaluation-chart');\n            const config = await chartConfig();\n            config.data = transformContext(context);\n            new ChartJS(canvas, config);\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\nconst transformContext = (context) => {\n    const data = context['evaluation-results'];\n    const labels = data.evaluations.map(criterion => criterion.name);\n    const graders = [];\n    const colors = [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        'rgba(255, 206, 86, 0.2)',\n        'rgba(75, 192, 192, 0.2)',\n        'rgba(153, 102, 255, 0.2)',\n        'rgba(255, 159, 64, 0.2)',\n    ];\n\n    data.evaluations.forEach(criterion => {\n        criterion.grades.forEach(grade => {\n            if (!graders[grade.userid]) {\n                const color = colors.shift();\n                graders[grade.userid] = {\n                    label: grade.gradername,\n                    data: [],\n                    fill: false,\n                    backgroundColor: color,\n                    // add other properties as needed\n                };\n            }\n            graders[grade.userid].data.push(grade.value);\n        });\n    });\n\n    return {\n        labels,\n        datasets: Object.values(graders)\n    };\n};\n\nconst chartConfig = async() => {\n    const title = await getString('supervisorchart', 'mod_competvet');\n    return {\n        type: 'radar',\n        options: {\n            title: {\n                display: true,\n                text: title,\n                position: 'bottom',\n                fontSize: 16,\n            },\n            scale: {\n                ticks: {\n                    display: false,\n                }\n            },\n            plugins: {\n                title: {\n                    display: true,\n                    text: title,\n                    position: 'bottom',\n                },\n                legend: {\n                    display: true,\n                    position: 'bottom'\n                },\n            }\n        }\n    };\n};\n\nstateTemplate();"],"names":["gradingApp","document","querySelector","transformContext","context","data","labels","evaluations","map","criterion","name","graders","colors","forEach","grades","grade","userid","color","shift","label","gradername","fill","backgroundColor","push","value","datasets","Object","values","chartConfig","async","title","type","options","display","text","position","fontSize","scale","ticks","plugins","legend","region","template","subscribe","undefined","render","then","innerHTML","html","canvas","getElementById","config","ChartJS","catch","Notification","exception","stateTemplate"],"mappings":";;;;;;;yMA6BMA,WAAaC,SAASC,cAAc,+BAyBpCC,iBAAoBC,gBAChBC,KAAOD,QAAQ,sBACfE,OAASD,KAAKE,YAAYC,KAAIC,WAAaA,UAAUC,OACrDC,QAAU,GACVC,OAAS,CACX,0BACA,0BACA,0BACA,0BACA,2BACA,kCAGJP,KAAKE,YAAYM,SAAQJ,YACrBA,UAAUK,OAAOD,SAAQE,YAChBJ,QAAQI,MAAMC,QAAS,OAClBC,MAAQL,OAAOM,QACrBP,QAAQI,MAAMC,QAAU,CACpBG,MAAOJ,MAAMK,WACbf,KAAM,GACNgB,MAAM,EACNC,gBAAiBL,OAIzBN,QAAQI,MAAMC,QAAQX,KAAKkB,KAAKR,MAAMS,aAIvC,CACHlB,OAAAA,OACAmB,SAAUC,OAAOC,OAAOhB,WAI1BiB,YAAcC,gBACVC,YAAc,mBAAU,kBAAmB,uBAC1C,CACHC,KAAM,QACNC,QAAS,CACLF,MAAO,CACHG,SAAS,EACTC,KAAMJ,MACNK,SAAU,SACVC,SAAU,IAEdC,MAAO,CACHC,MAAO,CACHL,SAAS,IAGjBM,QAAS,CACLT,MAAO,CACHG,SAAS,EACTC,KAAMJ,MACNK,SAAU,UAEdK,OAAQ,CACJP,SAAS,EACTE,SAAU,cA/ER,YAEZM,OAASzC,WAAWE,sCADL,0BAEfwC,oDAFe,yCAgBTC,UAhBS,oBAGEd,MAAAA,eACWe,IAA1BxC,QAJa,wCAOPyC,OAAOH,SAAUtC,SAAS0C,MAAKjB,MAAAA,OACrCY,OAAOM,UAAYC,WACbC,OAAShD,SAASiD,eAAe,oBACjCC,aAAevB,cACrBuB,OAAO9C,KAAOF,iBAAiBC,aAC3BgD,iBAAQH,OAAQE,WAErBE,MAAMC,sBAAaC,eAuE9BC"}