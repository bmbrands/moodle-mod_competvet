{"version":3,"file":"evaluation_chart.min.js","sources":["../../../../src/local/grading/components/evaluation_chart.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the evaluation chart.\n *\n * @module     mod_competvet/local/grading/components/evaluation_chart\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport ChartJS from 'core/chartjs';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\n/*\n* Define the evaluation chart template.\n*/\nconst stateTemplate = () => {\n    const templateName = 'evaluation-chart';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = async(context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        Templates.render(template, context).then(async(html) => {\n            region.innerHTML = html;\n\n            // Render the Evaluation Chart.\n            const evalchart = document.getElementById('evaluation-chart');\n            const config = await chartConfig();\n            config.data = transformContext(context);\n            if (config.data.datasets.length > 0) {\n                new ChartJS(evalchart, config);\n            }\n\n            // Render the Auto Evaluation Chart.\n            const autoeval = document.getElementById('auto-evaluation-chart');\n            const autoevalConfig = await chartConfig(true);\n            autoevalConfig.data = transformContext(context, true);\n            if (autoevalConfig.data.datasets.length > 0) {\n                new ChartJS(autoeval, autoevalConfig);\n            }\n\n            if (config.data.datasets.length === 0 && autoevalConfig.data.datasets.length === 0) {\n                region.innerHTML = '';\n            }\n\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\n/**\n * Transform the context to a format that can be used by the chart.\n * @param {Object} context The context object.\n * @param {Boolean} autoeval The autoeval flag.\n * @return {Object} The transformed context.\n */\nconst transformContext = (context, autoeval) => {\n    const currentUser = CompetState.getValue('user');\n    const self = currentUser.id;\n    const data = context['evaluation-results'];\n    const labels = data.evaluations.map(criterion => criterion.criterion.label);\n    const graders = [];\n    const colors = [\n        'rgba(255, 99, 132, 0.6)',\n        'rgba(54, 162, 235, 0.6)',\n        'rgba(255, 206, 86, 0.6)',\n        'rgba(75, 192, 192, 0.6)',\n        'rgba(153, 102, 255, 0.6)',\n        'rgba(255, 159, 64, 0.6)',\n    ];\n\n    const backgroundColors = [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        'rgba(255, 206, 86, 0.2)',\n        'rgba(75, 192, 192, 0.2)',\n        'rgba(153, 102, 255, 0.2)',\n        'rgba(255, 159, 64, 0.2)',\n    ];\n\n    data.evaluations.forEach(criterion => {\n        criterion.grades.forEach(grade => {\n            if (!grade.graderinfo || !grade.graderinfo.id) {\n                return;\n            }\n            if (autoeval && grade.graderinfo.id !== self) {\n                return;\n            } else if (!autoeval && grade.graderinfo.id === self) {\n                return;\n            }\n\n            if (!graders[grade.graderinfo.id]) {\n                const color = colors.shift();\n                const backgroundColor = backgroundColors.shift();\n                graders[grade.graderinfo.id] = {\n                    label: grade.graderinfo.fullname,\n                    data: [],\n                    fill: true,\n                    backgroundColor: backgroundColor,\n                    bordercolor: color,\n                    pointBackgroundColor: color,\n                    pointBorderColor: 'rgba(255, 255, 255, 1)',\n                    pointHoverBackgroundColor: 'rgba(255, 255, 255, 1)',\n                    pointHoverBorderColor: color,\n                };\n            }\n            graders[grade.graderinfo.id].data.push(grade.level);\n        });\n    });\n\n    return {\n        labels,\n        datasets: Object.values(graders)\n    };\n};\n\nconst chartConfig = async(autoeval) => {\n    let title = await getString('supervisorchart', 'mod_competvet');\n    if (autoeval) {\n        title = await getString('selfevaluation', 'mod_competvet');\n    }\n    return {\n        type: 'radar',\n        options: {\n            title: {\n                display: true,\n                text: title,\n                position: 'bottom',\n                font: {\n                    size: 16\n                },\n                fullSize: true\n            },\n            scales: {\n                r: {\n                    ticks: {\n                        display: true,\n                        min: 0,\n                        max: 100,\n                        stepSize: 25,\n                        callback: function(value) {\n                            // Display only specific tick values\n                            if (value === 25 || value === 50 || value === 75 || value === 100) {\n                                return value;\n                            }\n                            return '';\n                        },\n                    },\n                    pointLabels: {\n                        callback: function(label) {\n                            if (label.length > 10) {\n                                return label.substring(0, 10) + '...';\n                            }\n                            return label;\n                        }\n                    },\n                    angleLines: {\n                        display: false\n                    },\n                    suggestedMin: 0,\n                    suggestedMax: 100\n                }\n            },\n            plugins: {\n                title: {\n                    display: true,\n                    text: title,\n                    position: 'bottom'\n                },\n                legend: {\n                    display: true,\n                    position: 'bottom',\n                    labels: {\n                        usePointStyle: true, // Use point style for legend\n                        pointStyle: 'circle', // Set point style to circle\n                    }\n                },\n            }\n        }\n    };\n};\n\nstateTemplate();"],"names":["gradingApp","document","querySelector","transformContext","context","autoeval","self","CompetState","getValue","id","data","labels","evaluations","map","criterion","label","graders","colors","backgroundColors","forEach","grades","grade","graderinfo","color","shift","backgroundColor","fullname","fill","bordercolor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","push","level","datasets","Object","values","chartConfig","async","title","type","options","display","text","position","font","size","fullSize","scales","r","ticks","min","max","stepSize","callback","value","pointLabels","length","substring","angleLines","suggestedMin","suggestedMax","plugins","legend","usePointStyle","pointStyle","region","template","subscribe","undefined","render","then","innerHTML","html","evalchart","getElementById","config","ChartJS","autoevalConfig","catch","Notification","exception","stateTemplate"],"mappings":";;;;;;;yMA6BMA,WAAaC,SAASC,cAAc,+BAgDpCC,iBAAmB,CAACC,QAASC,kBAEzBC,KADcC,qBAAYC,SAAS,QAChBC,GACnBC,KAAON,QAAQ,sBACfO,OAASD,KAAKE,YAAYC,KAAIC,WAAaA,UAAUA,UAAUC,QAC/DC,QAAU,GACVC,OAAS,CACX,0BACA,0BACA,0BACA,0BACA,2BACA,2BAGEC,iBAAmB,CACrB,0BACA,0BACA,0BACA,0BACA,2BACA,kCAGJR,KAAKE,YAAYO,SAAQL,YACrBA,UAAUM,OAAOD,SAAQE,WAChBA,MAAMC,YAAeD,MAAMC,WAAWb,MAGvCJ,UAAYgB,MAAMC,WAAWb,KAAOH,QAE5BD,UAAYgB,MAAMC,WAAWb,KAAOH,MAAzC,KAIFU,QAAQK,MAAMC,WAAWb,IAAK,OACzBc,MAAQN,OAAOO,QACfC,gBAAkBP,iBAAiBM,QACzCR,QAAQK,MAAMC,WAAWb,IAAM,CAC3BM,MAAOM,MAAMC,WAAWI,SACxBhB,KAAM,GACNiB,MAAM,EACNF,gBAAiBA,gBACjBG,YAAaL,MACbM,qBAAsBN,MACtBO,iBAAkB,yBAClBC,0BAA2B,yBAC3BC,sBAAuBT,OAG/BP,QAAQK,MAAMC,WAAWb,IAAIC,KAAKuB,KAAKZ,MAAMa,cAI9C,CACHvB,OAAAA,OACAwB,SAAUC,OAAOC,OAAOrB,WAI1BsB,YAAcC,MAAAA,eACZC,YAAc,mBAAU,kBAAmB,wBAC3CnC,WACAmC,YAAc,mBAAU,iBAAkB,kBAEvC,CACHC,KAAM,QACNC,QAAS,CACLF,MAAO,CACHG,SAAS,EACTC,KAAMJ,MACNK,SAAU,SACVC,KAAM,CACFC,KAAM,IAEVC,UAAU,GAEdC,OAAQ,CACJC,EAAG,CACCC,MAAO,CACHR,SAAS,EACTS,IAAK,EACLC,IAAK,IACLC,SAAU,GACVC,SAAU,SAASC,cAED,KAAVA,OAA0B,KAAVA,OAA0B,KAAVA,OAA0B,MAAVA,MACzCA,MAEJ,KAGfC,YAAa,CACTF,SAAU,SAASxC,cACXA,MAAM2C,OAAS,GACR3C,MAAM4C,UAAU,EAAG,IAAM,MAE7B5C,QAGf6C,WAAY,CACRjB,SAAS,GAEbkB,aAAc,EACdC,aAAc,MAGtBC,QAAS,CACLvB,MAAO,CACHG,SAAS,EACTC,KAAMJ,MACNK,SAAU,UAEdmB,OAAQ,CACJrB,SAAS,EACTE,SAAU,SACVlC,OAAQ,CACJsD,eAAe,EACfC,WAAY,eAjKd,YAEZC,OAASnE,WAAWE,sCADL,0BAEfkE,oDAFe,yCAiCTC,UAjCS,oBAGE9B,MAAAA,eACW+B,IAA1BlE,QAJa,wCAOPmE,OAAOH,SAAUhE,SAASoE,MAAKjC,MAAAA,OACrC4B,OAAOM,UAAYC,WAGbC,UAAY1E,SAAS2E,eAAe,oBACpCC,aAAevC,cACrBuC,OAAOnE,KAAOP,iBAAiBC,SAC3ByE,OAAOnE,KAAKyB,SAASuB,OAAS,OAC1BoB,iBAAQH,UAAWE,cAIrBxE,SAAWJ,SAAS2E,eAAe,yBACnCG,qBAAuBzC,aAAY,GACzCyC,eAAerE,KAAOP,iBAAiBC,SAAS,GAC5C2E,eAAerE,KAAKyB,SAASuB,OAAS,OAClCoB,iBAAQzE,SAAU0E,gBAGU,IAAhCF,OAAOnE,KAAKyB,SAASuB,QAAwD,IAAxCqB,eAAerE,KAAKyB,SAASuB,SAClES,OAAOM,UAAY,OAIxBO,MAAMC,sBAAaC,eAyI9BC"}