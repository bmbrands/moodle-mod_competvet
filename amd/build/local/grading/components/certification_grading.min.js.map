{"version":3,"file":"certification_grading.min.js","sources":["../../../../src/local/grading/components/certification_grading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The grading component of the Evaluations tab.\n *\n * @module     mod_competvet/local/grading/components/evaluations_grading\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Repository from '../../new-repository';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\n/**\n * Define the user navigation.\n */\nconst stateTemplate = () => {\n    const templateName = 'certification-grading';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = (context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        // TODO, make the grid selection dynamic.\n        Templates.render(template, context).then((html) => {\n            region.innerHTML = html;\n            formEvents();\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\n// The stateTemplate function is called to render the certification-grading template and subscribe to the state.\nstateTemplate();\n\n// Get the form values.\nconst formCalculation = () => {\n    const {'certification-grading': grade, user} = CompetState.getData();\n    const grading = grade.grading;\n    grading.userid = user.id;\n    const form = document.querySelector('[data-region=\"certification-grading\"]');\n    const formData = new FormData(form);\n    const formObject = Object.fromEntries(formData);\n    grading.comment = formObject.comment;\n    grading.evaloptions.forEach((option) => {\n        if (option.key == Number(formObject.evaluatordecision)) {\n            option.selected = true;\n        } else {\n            option.selected = false;\n        }\n    });\n    const context = {\n        'grading': grading\n    };\n    return context;\n};\n\n// Listen to the form events and save the form data.\nconst formEvents = () => {\n    const form = document.querySelector('[data-region=\"certification-grading\"]');\n    if (form.dataset.events) {\n        return;\n    }\n    form.addEventListener('change', async(e) => {\n        e.preventDefault();\n        const context = formCalculation();\n        CompetState.setValue('certification-grading', context);\n    });\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const context = formCalculation();\n        const user = CompetState.getValue('user');\n        const planning = CompetState.getValue('planning');\n\n        const args = {\n            userid: user.id,\n            planningid: planning.id,\n            formname: 'certification-grading',\n            json: JSON.stringify(context.grading)\n        };\n\n        await Repository.saveFormData(args);\n        CompetState.setValue('certification-grading', context);\n    });\n    form.dataset.events = true;\n};\n\nformEvents();\n"],"names":["gradingApp","document","querySelector","templateName","region","template","subscribe","context","undefined","render","then","html","innerHTML","formEvents","catch","Notification","exception","stateTemplate","formCalculation","grade","user","CompetState","getData","grading","userid","id","form","formData","FormData","formObject","Object","fromEntries","comment","evaloptions","forEach","option","key","Number","evaluatordecision","selected","dataset","events","addEventListener","async","e","preventDefault","setValue","getValue","planning","args","planningid","formname","json","JSON","stringify","Repository","saveFormData"],"mappings":";;;;;;;qNA4BMA,WAAaC,SAASC,cAAc,+BAKpB,YACZC,aAAe,wBACfC,OAASJ,WAAWE,sCAA+BC,oBACnDE,oDAA+CF,mCAYzCG,UAAUH,cAXEI,eACUC,IAA1BD,QAAQJ,kCAIFM,OAAOJ,SAAUE,SAASG,MAAMC,OACtCP,OAAOQ,UAAYD,KACnBE,gBAEDC,MAAMC,sBAAaC,eAM9BC,SAGMC,gBAAkB,mCACYC,MAA1BC,KAAiCA,MAAQC,qBAAYC,UACrDC,QAAUJ,MAAMI,QACtBA,QAAQC,OAASJ,KAAKK,SAChBC,KAAOzB,SAASC,cAAc,yCAC9ByB,SAAW,IAAIC,SAASF,MACxBG,WAAaC,OAAOC,YAAYJ,UACtCJ,QAAQS,QAAUH,WAAWG,QAC7BT,QAAQU,YAAYC,SAASC,SACrBA,OAAOC,KAAOC,OAAOR,WAAWS,mBAChCH,OAAOI,UAAW,EAElBJ,OAAOI,UAAW,WAGV,SACDhB,UAMbV,WAAa,WACTa,KAAOzB,SAASC,cAAc,yCAChCwB,KAAKc,QAAQC,SAGjBf,KAAKgB,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACItC,QAAUW,uCACJ4B,SAAS,wBAAyBvC,YAElDmB,KAAKgB,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACItC,QAAUW,kBACVE,KAAOC,qBAAY0B,SAAS,QAC5BC,SAAW3B,qBAAY0B,SAAS,YAEhCE,KAAO,CACTzB,OAAQJ,KAAKK,GACbyB,WAAYF,SAASvB,GACrB0B,SAAU,wBACVC,KAAMC,KAAKC,UAAU/C,QAAQgB,gBAG3BgC,uBAAWC,aAAaP,2BAClBH,SAAS,wBAAyBvC,YAElDmB,KAAKc,QAAQC,QAAS,IAG1B5B"}