{"version":3,"file":"evaluations_grading.min.js","sources":["../../../../src/local/grading/components/evaluations_grading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The grading component of the Evaluations tab.\n *\n * @module     mod_competvet/local/grading/components/evaluations_grading\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Repository from '../../new-repository';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\n/**\n * Define the user navigation.\n */\nconst stateTemplate = () => {\n    const templateName = 'evaluations-grading';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = (context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        // TODO, make the grid selection dynamic.\n        Templates.render(template, context).then((html) => {\n            region.innerHTML = html;\n            formEvents();\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\nstateTemplate();\n\nconst formCalculation = () => {\n    const form = document.querySelector('[data-region=\"evaluations-grading\"]');\n    const formData = new FormData(form);\n    const formObject = Object.fromEntries(formData);\n    const {'evaluations-grading': evaluationsGrading, user} = CompetState.getData();\n    const grading = evaluationsGrading.grading;\n    grading.userid = user.id;\n    grading.deactivatepenalty = formObject.deactivatepenalty === 'on' ? 1 : 0;\n    const penalty = grading.deactivatepenalty ? 0 : 1;\n    grading.selfevaluation = formObject.selfevaluation;\n    grading.selfevalselectoptions.forEach((option) => {\n        if (option.value == Number(formObject.selfevaluation)) {\n            option.selected = true;\n        } else {\n            option.selected = false;\n        }\n    });\n    grading.finalscore = grading.evalscore + (grading.penalty * penalty) + Number(grading.selfevaluation);\n    grading.scoreevaluator = Number(formObject.scoreevaluator);\n    grading.comment = formObject.comment;\n    const context = {\n        'grading': grading\n    };\n    return context;\n};\n\nconst formEvents = () => {\n    const form = document.querySelector('[data-region=\"evaluations-grading\"]');\n    if (form.dataset.events) {\n        return;\n    }\n    form.addEventListener('change', async(e) => {\n        e.preventDefault();\n        const context = formCalculation();\n        CompetState.setValue('evaluations-grading', context);\n    });\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const context = formCalculation();\n        const user = CompetState.getValue('user');\n        const planning = CompetState.getValue('planning');\n\n        const args = {\n            userid: user.id,\n            planningid: planning.id,\n            formname: 'evaluations-grading',\n            json: JSON.stringify(context.grading)\n        };\n\n        const result = await Repository.saveFormData(args);\n        context.result = result;\n        CompetState.setValue('evaluations-grading', context);\n    });\n    form.dataset.events = true;\n};\n"],"names":["gradingApp","document","querySelector","templateName","region","template","subscribe","context","undefined","render","then","html","innerHTML","formEvents","catch","Notification","exception","stateTemplate","formCalculation","form","formData","FormData","formObject","Object","fromEntries","evaluationsGrading","user","CompetState","getData","grading","userid","id","deactivatepenalty","penalty","selfevaluation","selfevalselectoptions","forEach","option","value","Number","selected","finalscore","evalscore","scoreevaluator","comment","dataset","events","addEventListener","async","e","preventDefault","setValue","getValue","planning","args","planningid","formname","json","JSON","stringify","result","Repository","saveFormData"],"mappings":";;;;;;;qNA4BMA,WAAaC,SAASC,cAAc,+BAKpB,YACZC,aAAe,sBACfC,OAASJ,WAAWE,sCAA+BC,oBACnDE,oDAA+CF,mCAYzCG,UAAUH,cAXEI,eACUC,IAA1BD,QAAQJ,kCAIFM,OAAOJ,SAAUE,SAASG,MAAMC,OACtCP,OAAOQ,UAAYD,KACnBE,gBAEDC,MAAMC,sBAAaC,eAK9BC,SAEMC,gBAAkB,WACdC,KAAOlB,SAASC,cAAc,uCAC9BkB,SAAW,IAAIC,SAASF,MACxBG,WAAaC,OAAOC,YAAYJ,iCACRK,mBAAxBC,KAA4CA,MAAQC,qBAAYC,UAChEC,QAAUJ,mBAAmBI,QACnCA,QAAQC,OAASJ,KAAKK,GACtBF,QAAQG,kBAAqD,OAAjCV,WAAWU,kBAA6B,EAAI,QAClEC,QAAUJ,QAAQG,kBAAoB,EAAI,EAChDH,QAAQK,eAAiBZ,WAAWY,eACpCL,QAAQM,sBAAsBC,SAASC,SAC/BA,OAAOC,OAASC,OAAOjB,WAAWY,gBAClCG,OAAOG,UAAW,EAElBH,OAAOG,UAAW,KAG1BX,QAAQY,WAAaZ,QAAQa,UAAab,QAAQI,QAAUA,QAAWM,OAAOV,QAAQK,gBACtFL,QAAQc,eAAiBJ,OAAOjB,WAAWqB,gBAC3Cd,QAAQe,QAAUtB,WAAWsB,cACb,SACDf,UAKbhB,WAAa,WACTM,KAAOlB,SAASC,cAAc,uCAChCiB,KAAK0B,QAAQC,SAGjB3B,KAAK4B,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACI3C,QAAUW,uCACJiC,SAAS,sBAAuB5C,YAEhDY,KAAK4B,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACI3C,QAAUW,kBACVQ,KAAOC,qBAAYyB,SAAS,QAC5BC,SAAW1B,qBAAYyB,SAAS,YAEhCE,KAAO,CACTxB,OAAQJ,KAAKK,GACbwB,WAAYF,SAAStB,GACrByB,SAAU,sBACVC,KAAMC,KAAKC,UAAUpD,QAAQsB,UAG3B+B,aAAeC,uBAAWC,aAAaR,MAC7C/C,QAAQqD,OAASA,4BACLT,SAAS,sBAAuB5C,YAEhDY,KAAK0B,QAAQC,QAAS"}