define("mod_competvet/local/grading/grading_app_component",["exports","../new-repository","../competstate","../helpers","./components/user_navigation","./components/evaluations_observations","./components/evaluations_grading","./components/list_grading","./components/globalgrade","./components/certification_grading","./components/certification_results","./components/list_results","./components/evaluation_results"],(function(_exports,_newRepository,_competstate,_helpers,_user_navigation,_evaluations_observations,_evaluations_grading,_list_grading,_globalgrade,_certification_grading,_certification_results,_list_results,_evaluation_results){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_newRepository=_interopRequireDefault(_newRepository),_competstate=_interopRequireDefault(_competstate);class Competvet{constructor(){_defineProperty(this,"gradingApp",void 0),_defineProperty(this,"competvet",void 0),_defineProperty(this,"currentUser",void 0),this.gradingApp=document.querySelector('[data-region="grading-app"]'),this.cmId=this.gradingApp.dataset.cmId,this.situationid=this.gradingApp.dataset.situationid,this.evalgrid=this.gradingApp.dataset.evalgrid,this.certifgrid=this.gradingApp.dataset.certifgrid,this.listgrid=this.gradingApp.dataset.listgrid;const planning={id:this.gradingApp.dataset.planningid,cmid:this.cmId};_competstate.default.setValue("planning",planning),this.userlist=[],this.currentUser=0,this.setup(),this.addEventListeners()}async setup(){await this.getUsers();const currentUserId=this.gradingApp.dataset.studentid;currentUserId&&"0"!==currentUserId?this.setCurrentUser(this.userlist.find((user=>user.id===parseInt(currentUserId)))):this.setCurrentUser(this.userlist[0])}async setCurrentUser(user){this.gradingApp.dataset.studentid=user.id,_competstate.default.setValue("user",user),this.currentUser=user,this.setEvalResults(),this.setCertifResults(),this.setListResults(),await this.setListGrading(),this.setGlobalGrade(),this.setForms()}async setEvalResults(){const args={type:1,gridid:this.evalgrid},response=await _newRepository.default.getCriteria(args);if(!response.grids)return;const context={criteria:response.grids[0].criteria};_competstate.default.setValue("evaluation-results",context)}async setCertifResults(){const args={type:2,gridid:this.certifgrid},response=await _newRepository.default.getCriteria(args);if(!response.grids)return;const context={criteria:response.grids[0].criteria};_competstate.default.setValue("certification-results",context)}async setListResults(){const args={userid:this.currentUser.id,situationid:this.situationid},response=await _newRepository.default.getListResults(args);_competstate.default.setValue("list-results",response)}async setListGrading(){const args={type:3,gridid:this.listgrid},response=await _newRepository.default.getCriteria(args);if(!response.grids)return;const context={grading:{criteria:response.grids[0].criteria}};_competstate.default.setValue("list-grading",context)}async getUsers(){const args={cmid:this.cmId,roletype:"student"},response=await _newRepository.default.getUserList(args);response.users&&(this.userlist=response.users)}async setGlobalGrade(){const args={cmid:this.cmId,userid:this.currentUser.id},response=await _newRepository.default.getGlobalGrade(args);response.result&&_competstate.default.setValue("globalgrade",response.result)}async setForms(){["evaluations-grading","certification-grading","list-grading"].forEach((async formname=>{const args={userid:this.currentUser.id,planningid:this.gradingApp.dataset.planningid,formname:formname},response=await _newRepository.default.getFormData(args);if(!response.result)return;const context={grading:JSON.parse(response.data)};_competstate.default.setValue(formname,context)}))}moveUser(direction){let index=this.userlist.indexOf(this.currentUser);"prev"===direction&&index>0?this.setCurrentUser(this.userlist[index-1]):"next"===direction&&index<this.userlist.length-1&&this.setCurrentUser(this.userlist[index+1])}addEventListeners(){document.addEventListener("click",(async event=>{if(event.target.closest('[data-action="prevuser"]')&&this.moveUser("prev"),event.target.closest('[data-action="nextuser"]')&&this.moveUser("next"),event.target.closest('[data-action="reload"]')&&this.getEvaluations(),event.target.closest('[data-action="delete-case"]')){const button=event.target.closest('[data-action="delete-case"]');await _newRepository.default.deleteEntry({entryid:button.dataset.id}),this.setListResults()}})),this.gradingApp.addEventListener("caseAdded",(()=>{this.setListResults()}))}}var _default={init:()=>{new Competvet}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=grading_app_component.min.js.map