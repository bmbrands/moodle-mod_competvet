{"version":3,"file":"user_selector_mutations.min.js","sources":["../../src/local/user_selector_mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\nimport * as Storage from 'core/sessionstorage';\n\n/**\n * Default mutation manager\n *\n */\nexport class UserSelectorMutations {\n    /**\n     * Filter Toggle\n     *\n     * @param {StateManager} stateManager\n     **/\n    async filtersToggle(stateManager) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.info.filterShow = !state.info.filterShow;\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * User changed mutation\n     *\n     * @param {StateManager} stateManager\n     * @param {string} direction\n     * @return {Promise<void>}\n     */\n    async userChanged(stateManager, direction) {\n        // Get the state data from the state manager.\n        const state = stateManager.state;\n        const userList = state.users.toJSON(); // This is a list of users.\n        // Find the next user in userList and set it as current user.\n        const currentUser = state.info.currentUser;\n        const index = userList.findIndex((user) => user.id === currentUser);\n        if (index === -1) {\n            return;\n        }\n        let nextIndex = index;\n        if (direction === 'next') {\n            nextIndex++;\n            if (nextIndex >= userList.length) {\n                nextIndex = 0;\n            }\n        } else {\n            nextIndex--;\n            if (nextIndex < 0) {\n                nextIndex = userList.length - 1;\n            }\n        }\n        const nextUser = userList[nextIndex];\n        stateManager.setReadOnly(false);\n        state.info.currentUser = nextUser.id;\n        UserSelectorMutations.setCurrentUser(nextUser.id, state.cmId);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the current user in the storage.\n     * @param {number} userId\n     * @param {number} cmId\n     */\n    static setCurrentUser(userId, cmId) {\n        const storageKey = `competvet/grading/${cmId}/userList`;\n        Storage.set(storageKey, userId);\n    }\n\n    /**\n     * Get the current user from the storage.\n     * @param {number} cmId\n     * @return {number|null}\n     */\n    static getCurrentUser(cmId) {\n        const storageKey = `competvet/grading/${cmId}/userList`;\n        return Storage.get(storageKey);\n    }\n}\n"],"names":["UserSelectorMutations","stateManager","state","setReadOnly","info","filterShow","direction","userList","users","toJSON","currentUser","index","findIndex","user","id","nextIndex","length","nextUser","setCurrentUser","cmId","userId","storageKey","Storage","set","get"],"mappings":"woCAoBaA,0CAMWC,oBAEVC,MAAQD,aAAaC,MAC3BD,aAAaE,aAAY,GACzBD,MAAME,KAAKC,YAAcH,MAAME,KAAKC,WACpCJ,aAAaE,aAAY,qBAUXF,aAAcK,iBAEtBJ,MAAQD,aAAaC,MACrBK,SAAWL,MAAMM,MAAMC,SAEvBC,YAAcR,MAAME,KAAKM,YACzBC,MAAQJ,SAASK,WAAWC,MAASA,KAAKC,KAAOJ,kBACxC,IAAXC,iBAGAI,UAAYJ,MACE,SAAdL,WACAS,YACIA,WAAaR,SAASS,SACtBD,UAAY,KAGhBA,YACIA,UAAY,IACZA,UAAYR,SAASS,OAAS,UAGhCC,SAAWV,SAASQ,WAC1Bd,aAAaE,aAAY,GACzBD,MAAME,KAAKM,YAAcO,SAASH,GAClCd,sBAAsBkB,eAAeD,SAASH,GAAIZ,MAAMiB,MACxDlB,aAAaE,aAAY,yBAQPiB,OAAQD,YACpBE,uCAAkCF,kBACxCG,QAAQC,IAAIF,WAAYD,8BAQND,YACZE,uCAAkCF,yBACjCG,QAAQE,IAAIH"}