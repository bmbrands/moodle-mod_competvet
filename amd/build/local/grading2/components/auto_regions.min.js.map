{"version":3,"file":"auto_regions.min.js","sources":["../../../../src/local/grading2/components/auto_regions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Autoregions scans the grading app for regions tagged with data-auto-region and subscribes to the state.\n * The initial data is fetched from the web service and the region is rendered with the template.\n * The content of a div with data-auto-region=\"regionname\" is found in the templates/auto-region/regionname.mustache file.\n * The data is typically fetched from the /json folder in the module (when used as dummy data) or from the web service.\n *\n * @module     mod_competvet/local/grading2/grading_app_autoregions\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Repository from '../../new-repository';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\nconst getAutoRegions = () => {\n    const autoRegions = gradingApp.querySelectorAll('[data-auto-region]');\n    autoRegions.forEach((region) => {\n        const regionName = region.dataset.autoRegion;\n        const templateName = 'mod_competvet/auto-region/' + regionName;\n        const regionRenderer = (context) => {\n            if (context[regionName] === undefined) {\n                return;\n            }\n            Templates.render(templateName, context).then((html) => {\n                region.innerHTML = html;\n                return;\n            }).catch(Notification.exception);\n        };\n        CompetState.subscribe(regionName, regionRenderer);\n    });\n    updateAutoRegions();\n};\n\nconst updateAutoRegions = () => {\n    const autoRegions = gradingApp.querySelectorAll('[data-auto-region]');\n    autoRegions.forEach((region) => {\n        const regionName = region.dataset.autoRegion;\n        const args = {\n            'filename': regionName,\n        };\n        Repository.getJsonData(args).then((response) => {\n            const context = JSON.parse(response.data);\n            CompetState.setValue(regionName, context);\n            return;\n        }).catch(Notification.exception);\n    });\n};\n\ngetAutoRegions();\n\nexport default {getAutoRegions, updateAutoRegions};"],"names":["gradingApp","document","querySelector","getAutoRegions","querySelectorAll","forEach","region","regionName","dataset","autoRegion","templateName","subscribe","context","undefined","render","then","html","innerHTML","catch","Notification","exception","updateAutoRegions","args","getJsonData","response","JSON","parse","data","setValue"],"mappings":";;;;;;;;;;qSA+BMA,WAAaC,SAASC,cAAc,+BAEpCC,eAAiB,KACCH,WAAWI,iBAAiB,sBACpCC,SAASC,eACXC,WAAaD,OAAOE,QAAQC,WAC5BC,aAAe,6BAA+BH,gCAUxCI,UAAUJ,YATEK,eACQC,IAAxBD,QAAQL,gCAGFO,OAAOJ,aAAcE,SAASG,MAAMC,OAC1CV,OAAOW,UAAYD,QAEpBE,MAAMC,sBAAaC,iBAI9BC,qBAGEA,kBAAoB,KACFrB,WAAWI,iBAAiB,sBACpCC,SAASC,eACXC,WAAaD,OAAOE,QAAQC,WAC5Ba,KAAO,UACGf,mCAELgB,YAAYD,MAAMP,MAAMS,iBACzBZ,QAAUa,KAAKC,MAAMF,SAASG,2BACxBC,SAASrB,WAAYK,YAElCM,MAAMC,sBAAaC,eAI9BjB,8BAEe,CAACA,eAAAA,eAAgBkB,kBAAAA"}