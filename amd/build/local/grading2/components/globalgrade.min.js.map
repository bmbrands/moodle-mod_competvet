{"version":3,"file":"globalgrade.min.js","sources":["../../../../src/local/grading2/components/globalgrade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module globalgrade\n *\n * @module     mod_competvet/local/grading2/components/globalgrade\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Repository from '../../new-repository';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\nconst stateTemplate = () => {\n    const templateName = 'globalgrade';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    const template = `mod_competvet/grading2/components/${templateName}`;\n    const regionRenderer = (context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        Templates.render(template, context).then((html) => {\n            region.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\nconst formEvents = () => {\n    const form = document.querySelector('[data-region=\"globalgrade\"]');\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const {globalgrade, user} = CompetState.getData();\n        const formData = new FormData(form);\n        const formObject = {};\n        for (const [name, value] of formData.entries()) {\n          formObject[name] = value;\n        }\n        globalgrade.userid = user.id;\n        globalgrade.finalgrade = formObject.finalgrade;\n        const selectedOption = globalgrade.finalgradeoptions.find(element => element.value === formObject.finalgrade);\n        if (selectedOption) {\n            selectedOption.selected = true;\n        }\n        globalgrade.comment = formObject.comment;\n        await Repository.saveGlobalGrade(globalgrade);\n        CompetState.setValue('globalgrade', globalgrade);\n    });\n};\n\nstateTemplate();\nformEvents();"],"names":["gradingApp","document","querySelector","region","template","subscribe","context","undefined","render","then","html","innerHTML","catch","Notification","exception","stateTemplate","form","addEventListener","async","e","preventDefault","globalgrade","user","CompetState","getData","formData","FormData","formObject","name","value","entries","userid","id","finalgrade","selectedOption","finalgradeoptions","find","element","selected","comment","Repository","saveGlobalGrade","setValue","formEvents"],"mappings":";;;;;;;qNA4BMA,WAAaC,SAASC,cAAc,+BAEpB,YAEZC,OAASH,WAAWE,sCADL,qBAEfE,qDAFe,oCAYTC,UAZS,eAGGC,eACUC,IAA1BD,QAAO,gCAGDE,OAAOJ,SAAUE,SAASG,MAAMC,OACtCP,OAAOQ,UAAYD,QAEpBE,MAAMC,sBAAaC,eA2B9BC,GAtBmB,YACTC,KAAOf,SAASC,cAAc,+BACpCc,KAAKC,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACIC,YAACA,YAADC,KAAcA,MAAQC,qBAAYC,UAClCC,SAAW,IAAIC,SAASV,MACxBW,WAAa,OACd,MAAOC,KAAMC,SAAUJ,SAASK,UACnCH,WAAWC,MAAQC,MAErBR,YAAYU,OAAST,KAAKU,GAC1BX,YAAYY,WAAaN,WAAWM,iBAC9BC,eAAiBb,YAAYc,kBAAkBC,MAAKC,SAAWA,QAAQR,QAAUF,WAAWM,aAC9FC,iBACAA,eAAeI,UAAW,GAE9BjB,YAAYkB,QAAUZ,WAAWY,cAC3BC,uBAAWC,gBAAgBpB,kCACrBqB,SAAS,cAAerB,iBAK5CsB"}