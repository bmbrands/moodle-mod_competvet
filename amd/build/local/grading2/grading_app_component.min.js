define("mod_competvet/local/grading2/grading_app_component",["exports","../new-repository","../competstate","./components/auto_regions","./components/user_navigation","./components/evaluations_observations","./components/evaluations_comments","./components/evaluations_grading","./components/list_criteria","./components/globalgrade"],(function(_exports,_newRepository,_competstate,_auto_regions,_user_navigation,_evaluations_observations,_evaluations_comments,_evaluations_grading,_list_criteria,_globalgrade){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_newRepository=_interopRequireDefault(_newRepository),_competstate=_interopRequireDefault(_competstate);class Competvet{constructor(){_defineProperty(this,"gradingApp",void 0),_defineProperty(this,"competvet",void 0),_defineProperty(this,"currentUser",void 0),this.gradingApp=document.querySelector('[data-region="grading-app"]'),this.cmId=this.gradingApp.dataset.cmId,this.planningId=this.gradingApp.dataset.planningid,this.userlist=[],this.currentUser=0,this.setup(),this.addEventListeners()}async setup(){await this.getUsers();const currentUserId=this.gradingApp.dataset.studentid;currentUserId&&"0"!==currentUserId?this.setCurrentUser(this.userlist.find((user=>user.id===parseInt(currentUserId)))):this.setCurrentUser(this.userlist[0])}setCurrentUser(user){_competstate.default.setData({user:user}),this.currentUser=user,this.setEvalObservations(),this.setEvalGrading(),this.setListCriteria(),this.setGlobalGrade()}async getUsers(){const args={cmid:this.cmId,roletype:"student"},response=await _newRepository.default.getUserList(args);response.users&&(this.userlist=response.users)}async setEvalObservations(){const args={userid:this.currentUser.id,planningid:this.planningId},response=await _newRepository.default.getEvaluations(args);if(!response.evaluations)return;const context={observations:response.evaluations,comments:response.comments};let stateData=_competstate.default.getData();stateData["evaluations-observations"]=context,_competstate.default.setData(stateData)}async setEvalGrading(){const args={userid:this.currentUser.id,planningid:this.planningId},response=await _newRepository.default.getEvaluationGrading(args);if(!response.evaluationsgrading)return;const context={grading:response.evaluationsgrading};let stateData=_competstate.default.getData();stateData["evaluations-grading"]=context,_competstate.default.setData(stateData)}async setListCriteria(){const args={cmid:this.cmId,userid:this.currentUser.id},response=await _newRepository.default.getListCriteria(args);if(!response.criteria)return;const context={criteria:response.criteria};let stateData=_competstate.default.getData();stateData["list-criteria"]=context,_competstate.default.setData(stateData)}async setGlobalGrade(){const args={cmid:this.cmId,userid:this.currentUser.id},response=await _newRepository.default.getGlobalGrade(args);if(!response.globalgrade)return;let stateData=_competstate.default.getData();stateData.globalgrade=response.globalgrade,_competstate.default.setData(stateData)}moveUser(direction){let index=this.userlist.indexOf(this.currentUser);"prev"===direction&&index>0?this.setCurrentUser(this.userlist[index-1]):"next"===direction&&index<this.userlist.length-1&&this.setCurrentUser(this.userlist[index+1])}addEventListeners(){document.addEventListener("click",(event=>{event.target.closest('[data-action="prevuser"]')&&this.moveUser("prev"),event.target.closest('[data-action="nextuser"]')&&this.moveUser("next"),event.target.closest('[data-action="reload"]')&&this.getEvaluations()}))}}var _default={init:()=>{new Competvet}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=grading_app_component.min.js.map