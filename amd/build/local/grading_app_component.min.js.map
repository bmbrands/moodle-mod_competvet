{"version":3,"file":"grading_app_component.min.js","sources":["../../src/local/grading_app_component.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Grading app coponent\n *\n * This component is mostly used to ensure all subcomponents find a parent\n * compoment with a reactive instance defined.\n *\n * @module     mod_competvet/local/user_selector\n * @class     mod_competvet/local/userSelector\n * @copyright  2023 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getGradingAppReactive} from 'mod_competvet/local/grading_app_reactive';\nimport {default as Events} from 'mod_competvet/local/events';\n\n/**\n * This is the main component.\n *\n * This component has two subcomponents:\n *  * the user selector\n *  * the user situation info\n * They all use the GradeAppReactive instance to get and set the data regarding\n * the user, situation and group that will feed the main panels (grading panel and situation panel).\n */\nexport default class extends BaseComponent {\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'grading-app';\n        this.selectors = {\n            USER_SELECTOR: `[data-region='user-selector']`,\n            SITUATION_INFO: `[data-region='user-situation-info']`,\n            LAYOUT_CONTROL: `[data-region='layout-control']`,\n            GRADER_FORMS: `[data-region='grader-item']`,\n        };\n        this.userSelectorComponent = null;\n        this.userSituationComponent = null;\n        this.cmId = this.getElement().dataset.cmid;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {Node} element the DOM main element\n     * @param {object} selectors optional css selector overrides\n     * @return {BaseComponent} the component instance\n     */\n    static init(element, selectors) {\n        const cmId = element.dataset.cmid;\n        const reactive = getGradingAppReactive(cmId); // Get or create reactive.\n        return new this({\n            element: element,\n            reactive: reactive,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @return {Promise<void>}\n     */\n    async stateReady() {\n        this.reactive.dispatch(Events.initUserList); // Initialise current user through mutation that will chain events and\n        // update the user list and the current situation list for this user.\n        this.layoutControl = await this.renderComponent(\n            this.getElement(this.selectors.LAYOUT_CONTROL),\n            'mod_competvet/grading/navigation/layout_control', {\n                cmid: this.cmId,\n            });\n    }\n\n    /**\n     * Get Watcher\n     * @return {[{handler: *, watch: string}]}\n     */\n    getWatchers() {\n        return [\n            // The state.users:created is triggered by the initUserList mutation creates the users field in the state.\n            {watch: `state.users:created`, handler: this._createUserSelector},\n            {watch: `state.plannings:created`, handler: this._createUserSituationInfo},\n            {watch: `state.currentUser:updated`, handler: this._updateUserSituationInfo},\n        ];\n    }\n\n    /**\n     * Create the user selector\n     * @param {Object} options\n     * @param {Object} options.element\n     * @private\n     */\n    async _createUserSelector({element}) {\n        this.userSelectorComponent = await this.renderComponent(\n            this.getElement(this.selectors.USER_SELECTOR),\n            'mod_competvet/grading/navigation/user_selector', {\n                cmid: this.cmId,\n                users: element.users.toJSON()\n            });\n        // Then we will load the situation info component.\n        this.reactive.dispatch(Events.initUserSituationInfo);\n    }\n\n    /**\n     * Create the situation Info component\n     * @param {Object} options\n     * @param {Object} options.element\n     * @private\n     */\n    async _createUserSituationInfo({element}) {\n        this.userSelectorComponent = await this.renderComponent(\n            this.getElement(this.selectors.SITUATION_INFO),\n            'mod_competvet/grading/navigation/situation_info', {\n                cmid: this.cmId,\n                user: element.currentUser\n            });\n    }\n\n    async _updateUserSituationInfo({element}) {\n        const userId = element.currentUser.id;\n        const formelements = this.getElements(this.selectors.GRADER_FORMS);\n        this.graderComponent = [];\n        for (const el of formelements) {\n            const data = el.dataset;\n            this.graderComponent[data.itemName] = await this.renderComponent(\n                el.querySelector(`[data-region='grader-container']`),\n                'mod_competvet/grading/grader',\n                {\n                    cmid: this.cmId,\n                    contextid: data.contextid,\n                    component: data.gradingComponent,\n                    subcomponent: data.gradingComponentSubtype,\n                    itemname: data.itemName,\n                    userid: userId,\n                }\n            );\n        }\n    }\n}"],"names":["BaseComponent","create","name","selectors","USER_SELECTOR","SITUATION_INFO","LAYOUT_CONTROL","GRADER_FORMS","userSelectorComponent","userSituationComponent","cmId","this","getElement","dataset","cmid","element","reactive","dispatch","Events","initUserList","layoutControl","renderComponent","getWatchers","watch","handler","_createUserSelector","_createUserSituationInfo","_updateUserSituationInfo","users","toJSON","initUserSituationInfo","user","currentUser","userId","id","formelements","getElements","graderComponent","el","data","itemName","querySelector","contextid","component","gradingComponent","subcomponent","gradingComponentSubtype","itemname","userid"],"mappings":";;;;;;;;;;;oKAwC6BA,wBAIzBC,cAESC,KAAO,mBACPC,UAAY,CACbC,8CACAC,qDACAC,gDACAC,iDAECC,sBAAwB,UACxBC,uBAAyB,UACzBC,KAAOC,KAAKC,aAAaC,QAAQC,iBAU9BC,QAASZ,iBACXO,KAAOK,QAAQF,QAAQC,YAEtB,IAAIH,KAAK,CACZI,QAASA,QACTC,UAHa,+CAAsBN,MAInCP,UAAAA,oCAUCa,SAASC,SAASC,gBAAOC,mBAEzBC,oBAAsBT,KAAKU,gBAC5BV,KAAKC,WAAWD,KAAKR,UAAUG,gBAC/B,kDAAmD,CAC/CQ,KAAMH,KAAKD,OAQvBY,oBACW,CAEH,CAACC,4BAA8BC,QAASb,KAAKc,qBAC7C,CAACF,gCAAkCC,QAASb,KAAKe,0BACjD,CAACH,kCAAoCC,QAASb,KAAKgB,+DAUjCZ,QAACA,mBAClBP,4BAA8BG,KAAKU,gBACpCV,KAAKC,WAAWD,KAAKR,UAAUC,eAC/B,iDAAkD,CAC9CU,KAAMH,KAAKD,KACXkB,MAAOb,QAAQa,MAAMC,gBAGxBb,SAASC,SAASC,gBAAOY,iEASHf,QAACA,oBACvBP,4BAA8BG,KAAKU,gBACpCV,KAAKC,WAAWD,KAAKR,UAAUE,gBAC/B,kDAAmD,CAC/CS,KAAMH,KAAKD,KACXqB,KAAMhB,QAAQiB,wDAIKjB,QAACA,qBACtBkB,OAASlB,QAAQiB,YAAYE,GAC7BC,aAAexB,KAAKyB,YAAYzB,KAAKR,UAAUI,mBAChD8B,gBAAkB,OAClB,MAAMC,MAAMH,aAAc,OACrBI,KAAOD,GAAGzB,aACXwB,gBAAgBE,KAAKC,gBAAkB7B,KAAKU,gBAC7CiB,GAAGG,kDACH,+BACA,CACI3B,KAAMH,KAAKD,KACXgC,UAAWH,KAAKG,UAChBC,UAAWJ,KAAKK,iBAChBC,aAAcN,KAAKO,wBACnBC,SAAUR,KAAKC,SACfQ,OAAQf"}