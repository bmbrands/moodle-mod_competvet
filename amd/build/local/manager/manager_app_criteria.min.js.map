{"version":3,"file":"manager_app_criteria.min.js","sources":["../../../src/local/manager/manager_app_criteria.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_grading\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/grading2/competstate';\nimport Repository from 'mod_competvet/local/grading2/repository';\nimport {get_string as getString} from 'core/str';\nimport './grids';\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"criteria\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.dataset = this.app.region;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getListCriteria(this.cmId);\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.stopEdit();\n            this.save();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n    }\n\n    removeEdit() {\n        let state = CompetState.getData();\n        state.grids.forEach((element) => {\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    async add(btn) {\n        this.save();\n        let state = CompetState.getData();\n\n        if (btn.dataset.type === 'grid') {\n            state.grids.push({\n                categorytext: '',\n                placeholder: await getString('newgrid', 'mod_competvet'),\n                gridid: 0,\n                criteria: [],\n            });\n        }\n        if (btn.dataset.type === 'criterium') {\n            this.removeEdit();\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            let newGradeID = 1;\n            let newSortOrder = 1;\n            if (index.criteria.length > 0) {\n                newGradeID = Math.max(...index.criteria.map((element) => element.criteriumid)) + 1;\n                newSortOrder = Math.max(...index.criteria.map((element) => element.sortorder)) + 1;\n            }\n            index.criteria.push({\n                criteriumid: newGradeID,\n                sortorder: newSortOrder,\n                title: '',\n                placeholder: await getString('newcriterium', 'mod_competvet'),\n                edit: true,\n                options: [],\n            });\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.criteriumId));\n            let newOptionId = 1;\n            let newSortOrder = 1;\n            if (criterium.options.length > 0) {\n                newOptionId = Math.max(...criterium.options.map((element) => element.optionid)) + 1;\n                newSortOrder = Math.max(...criterium.options.map((element) => element.sortorder)) + 1;\n            }\n            criterium.options.push({\n                optionid: newOptionId,\n                sortorder: newSortOrder,\n                title: '',\n                placeholder: await getString('newoption', 'mod_competvet'),\n                grade: 0,\n            });\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'grid') {\n            state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId)).deleted = true;\n        }\n        if (btn.dataset.type === 'criterium') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.criteriumId));\n            criterium.options.find((element) => element.optionid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        this.stopEdit(state);\n        if (btn.dataset.type === 'grid') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.id));\n            index.edit = true;\n        }\n        if (btn.dataset.type === 'criterium') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.id));\n            criterium.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        state.grids.forEach((element) => {\n            element.edit = false;\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n        CompetState.setData(state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    save() {\n        const state = CompetState.getData();\n        state.grids.forEach((element) => {\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.gridname = this.getValue('grid', 'gridname', element.gridid);\n            }\n            element.criteria.forEach((element) => {\n                if (element.edit && !element.deleted) {\n                    // Update the criterium with the new values from the UI.\n                    element.haschanged = true;\n                    element.title = this.getValue('criterium', 'title', element.criteriumid);\n                    element.options.forEach((element) => {\n                        if (element.deleted) {\n                            return;\n                        }\n                        element.title = this.getValue('option', 'title', element.optionid);\n                        element.grade = this.getValue('option', 'grade', element.optionid);\n                    });\n                }\n            });\n        });\n        CompetState.setData(state);\n        Repository.saveListCriteria(state);\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        // If the domNode is a div, it is a contenteditable field, return the innerHTML.\n        // If the domNode is an input, return the value.\n        return domNode.tagName === 'DIV' ? domNode.innerHTML : domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","region","addEventListeners","getData","response","Repository","getListCriteria","setData","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","stopEdit","save","delete","removeEdit","CompetState","grids","forEach","element","criteria","state","type","push","categorytext","placeholder","gridid","index","find","parseInt","gridId","newGradeID","newSortOrder","length","Math","max","map","criteriumid","sortorder","title","options","criterium","criteriumId","newOptionId","optionid","grade","deleted","id","haschanged","gridname","getValue","saveListCriteria","property","domNode","tagName","innerHTML","value","init"],"mappings":"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"}