{"version":3,"file":"manager_app_criteria.min.js","sources":["../../../src/local/manager/manager_app_criteria.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_criteria\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport {get_string as getString} from 'core/str';\nimport './grids';\nimport './navigation';\n\n/*\n* A CRUD manager for data.\n*/\n\n/**\n * Constants for eval certif and list.\n */\nconst COMPETVET_CRITERIA_EVALUATION = 1;\nconst COMPETVET_CRITERIA_CERTIFICATION = 2;\nconst COMPETVET_CRITERIA_LIST = 3;\n\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"criteria\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.sets = [COMPETVET_CRITERIA_EVALUATION, COMPETVET_CRITERIA_CERTIFICATION, COMPETVET_CRITERIA_LIST];\n        this.dataset = COMPETVET_CRITERIA_EVALUATION;\n        this.addEventListeners();\n        this.getData();\n        this.setNavigation();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const args = {\n            type: this.dataset,\n            gridid: 0,\n        };\n        const response = await Repository.getCriteria(args);\n        CompetState.setValue('datatree', response);\n    }\n\n    /**\n     * Get the grid object keys that can be accepted by the server.\n     */\n    get gridObjectKeys() {\n        return ['gridid', 'gridname', 'sortorder', 'criteria', 'haschanged', 'deleted', 'updatesortorder'];\n    }\n\n    /**\n     * Get the criterion object keys that can be accepted by the server.\n     * @return {Array} The keys.\n     */\n    get criterionObjectKeys() {\n        return [\n            'criterionid', 'idnumber', 'sortorder', 'title', 'options', 'haschanged','hasoptions', 'deleted', 'updatesortorder'\n        ];\n    }\n\n    /**\n     * Get the option object keys that can be accepted by the server.\n     * @return {Array} The keys.\n     */\n    get optionObjectKeys() {\n        return ['optionid', 'idnumber', 'sortorder', 'title', 'grade', 'haschanged', 'deleted', 'updatesortorder'];\n    }\n\n    /**\n     * Set the current navigation set.\n     */\n    setNavigation() {\n        const context = {\n            \"eval\": this.dataset == COMPETVET_CRITERIA_EVALUATION,\n            \"evalconst\": COMPETVET_CRITERIA_EVALUATION,\n            \"list\": this.dataset == COMPETVET_CRITERIA_LIST,\n            \"listconst\": COMPETVET_CRITERIA_LIST,\n            \"certif\": this.dataset == COMPETVET_CRITERIA_CERTIFICATION,\n            \"certifconst\": COMPETVET_CRITERIA_CERTIFICATION,\n        };\n        CompetState.setValue('navigation', context);\n        CompetState.setValue('type', this.dataset);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n        if (btn.dataset.action === 'changedataset') {\n            this.dataset = Number(btn.dataset.dataset);\n            this.setNavigation();\n            this.getData();\n        }\n    }\n\n    removeEdit() {\n        let state = CompetState.getValue('datatree');\n        state.grids.forEach((element) => {\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    async add(btn) {\n        this.update();\n        let state = CompetState.getValue('datatree');\n\n        if (btn.dataset.type === 'grid') {\n            let newGridId = 1;\n            let newGridSortOrder = 1;\n            if (state.grids.length > 0) {\n                newGridId = Math.max(...state.grids.map((element) => element.gridid)) + 1;\n                newGridSortOrder = Math.max(...state.grids.map((element) => element.sortorder)) + 1;\n            }\n            state.grids.push({\n                gridname: '',\n                edit: true,\n                placeholder: await getString('newgrid', 'mod_competvet'),\n                gridid: newGridId,\n                sortorder: newGridSortOrder,\n                criteria: [],\n            });\n        }\n        if (btn.dataset.type === 'criterion') {\n            this.removeEdit();\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            let newCritSortOrder = 1;\n            if (index.criteria.length > 0) {\n                newCritSortOrder = Math.max(...index.criteria.map((element) => element.sortorder)) + 1;\n            }\n            const newcriterion = {\n                criterionid: 0,\n                idnumber: 'G' + index.gridid + '-C' + newCritSortOrder,\n                sortorder: newCritSortOrder,\n                title: '',\n                placeholder: await getString('newcriterion', 'mod_competvet'),\n                options: [],\n                edit: true,\n            };\n\n            if (this.dataset == COMPETVET_CRITERIA_LIST || this.dataset == COMPETVET_CRITERIA_EVALUATION) {\n                newcriterion.hasoptions = true;\n            }\n            index.criteria.push(newcriterion);\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterion = index.criteria.find((element) => element.criterionid === parseInt(btn.dataset.criterionId));\n            criterion.edit = true;\n            let newOptSortOrder = 1;\n            if (criterion.options.length > 0) {\n                newOptSortOrder = Math.max(...criterion.options.map((element) => element.sortorder)) + 1;\n            }\n            const newOption = {\n                optionid: 0,\n                idnumber: 'G' + index.gridid + '-C' + criterion.criterionid + '-O' + newOptSortOrder,\n                sortorder: newOptSortOrder,\n                title: '',\n                placeholder: await getString('newoption', 'mod_competvet'),\n            };\n            if (this.dataset === COMPETVET_CRITERIA_LIST) {\n                newOption.hasgrade = true;\n                newOption.grade = 0;\n            }\n            criterion.options.push(newOption);\n        }\n        CompetState.setValue('datatree', state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getValue('datatree');\n        if (btn.dataset.type === 'grid') {\n            state.grids.find((element) => element.gridid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        if (btn.dataset.type === 'criterion') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            index.criteria.find((element) => element.criterionid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterion = index.criteria.find((element) => element.criterionid === parseInt(btn.dataset.criterionId));\n            criterion.options.find((element) => element.optionid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        CompetState.setValue('datatree', state);\n        this.save();\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        const state = CompetState.getValue('datatree');\n        // Remove edit from all fields.\n        this.stopEdit(state);\n        if (btn.dataset.type === 'grid') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.id));\n            index.edit = true;\n        }\n        if (btn.dataset.type === 'criterion') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterion = index.criteria.find((element) => element.criterionid === parseInt(btn.dataset.id));\n            criterion.edit = true;\n            if (this.dataset == COMPETVET_CRITERIA_LIST || this.dataset == COMPETVET_CRITERIA_EVALUATION) {\n                criterion.hasoptions = true;\n            }\n        }\n        CompetState.setValue('datatree', state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getValue('datatree');\n        // Remove edit from all fields.\n        state.grids.forEach((element) => {\n            element.edit = false;\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n        CompetState.setValue('datatree', state);\n    }\n\n    update() {\n        const state = CompetState.getValue('datatree');\n        state.grids.forEach((element) => {\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.gridname = this.getValue('grid', 'gridname', element.gridid);\n            }\n            element.criteria.forEach((element) => {\n                if (element.edit && !element.deleted) {\n                    // Update the criterion with the new values from the UI.\n                    element.haschanged = true;\n                    element.title = this.getValue('criterion', 'title', element.criterionid);\n                    if (!element.hasoptions) {\n                        return;\n                    }\n                    element.options.forEach((element) => {\n                        if (element.deleted) {\n                            return;\n                        }\n                        element.title = this.getValue('option', 'title', element.optionid);\n                        if (this.dataset === COMPETVET_CRITERIA_LIST) {\n                            element.grade = this.getValue('option', 'grade', element.optionid);\n                            element.grade = parseFloat(element.grade);\n                        }\n                    });\n                }\n            });\n        });\n        CompetState.setValue('datatree', state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    async save() {\n        this.update();\n        const state = CompetState.getValue('datatree');\n        // Clone the state, remove the edit flags.\n        const saveState = {\n            grids: [],\n        };\n        if (state.grids.length > 0) {\n            saveState.grids = [...state.grids];\n        }\n        saveState.grids.forEach((element) => {\n            Object.keys(element).forEach((key) => {\n                if (!this.gridObjectKeys.includes(key)) {\n                    delete element[key];\n                }\n            });\n            element.criteria.forEach((element) => {\n                Object.keys(element).forEach((key) => {\n                    if (!this.criterionObjectKeys.includes(key)) {\n                        delete element[key];\n                    }\n                });\n                if (!element.haschanged) {\n                    element.haschanged = false;\n                }\n                if (!element.hasoptions) {\n                    return;\n                }\n                element.options.forEach((element) => {\n                    Object.keys(element).forEach((key) => {\n                        if (!this.optionObjectKeys.includes(key)) {\n                            delete element[key];\n                        }\n                    });\n                });\n            });\n        });\n\n        saveState.type = Number(this.dataset);\n        await Repository.saveCriteria(saveState);\n\n        this.getData();\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        // If the domNode is a div, it is a contenteditable field, return the innerHTML.\n        // If the domNode is an input, return the value.\n        return domNode.tagName === 'DIV' ? domNode.innerHTML : domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","sets","addEventListeners","getData","setNavigation","args","type","gridid","response","Repository","getCriteria","setValue","gridObjectKeys","criterionObjectKeys","optionObjectKeys","context","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","stopEdit","delete","Number","removeEdit","CompetState","getValue","grids","forEach","element","criteria","update","state","newGridId","newGridSortOrder","length","Math","max","map","sortorder","push","gridname","placeholder","index","find","parseInt","gridId","newCritSortOrder","newcriterion","criterionid","idnumber","title","options","hasoptions","criterion","criterionId","newOptSortOrder","newOption","optionid","hasgrade","grade","id","deleted","haschanged","parseFloat","saveState","Object","keys","key","includes","saveCriteria","property","domNode","tagName","innerHTML","value","init"],"mappings":"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"}