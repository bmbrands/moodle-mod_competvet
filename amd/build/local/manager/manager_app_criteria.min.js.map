{"version":3,"file":"manager_app_criteria.min.js","sources":["../../../src/local/manager/manager_app_criteria.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_criteria\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport {get_string as getString} from 'core/str';\nimport './grids';\nimport './navigation';\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"criteria\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.sets = ['eval', 'list', 'certif'];\n        this.dataset = this.sets[0];\n        this.addEventListeners();\n        this.getData();\n        this.setNavigation();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        let response = false;\n        if (this.dataset === 'eval') {\n            response = await Repository.getEvaluationCriteria(this.cmId);\n        }\n        if (this.dataset === 'list') {\n            response = await Repository.getListCriteria(this.cmId);\n        }\n        if (this.dataset === 'certif') {\n            response = await Repository.getCertificationCriteria(this.cmId);\n        }\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Set the current navigation set.\n     */\n    setNavigation() {\n        const context = {\n            \"eval\": this.dataset === 'eval',\n            \"list\": this.dataset === 'list',\n            \"certif\": this.dataset === 'certif',\n        };\n        CompetState.setValue('navigation', context);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n        if (btn.dataset.action === 'changedataset') {\n            this.dataset = btn.dataset.dataset;\n            this.setNavigation();\n            this.getData();\n        }\n    }\n\n    removeEdit() {\n        let state = CompetState.getData();\n        state.grids.forEach((element) => {\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    async add(btn) {\n        this.save();\n        let state = CompetState.getData();\n\n        if (btn.dataset.type === 'grid') {\n            let newGridId = 1;\n            let newSortOrder = 1;\n            if (state.grids.length > 0) {\n                newGridId = Math.max(...state.grids.map((element) => element.gridid)) + 1;\n                newSortOrder = Math.max(...state.grids.map((element) => element.sortorder)) + 1;\n            }\n            state.grids.push({\n                gridname: '',\n                edit: true,\n                placeholder: await getString('newgrid', 'mod_competvet'),\n                gridid: newGridId,\n                sortorder: newSortOrder,\n                criteria: [],\n            });\n        }\n        if (btn.dataset.type === 'criterium') {\n            this.removeEdit();\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            let newGradeID = 1;\n            let newSortOrder = 1;\n            if (index.criteria.length > 0) {\n                newGradeID = Math.max(...index.criteria.map((element) => element.criteriumid)) + 1;\n                newSortOrder = Math.max(...index.criteria.map((element) => element.sortorder)) + 1;\n            }\n            const newCriterium = {\n                criteriumid: newGradeID,\n                sortorder: newSortOrder,\n                title: '',\n                placeholder: await getString('newcriterium', 'mod_competvet'),\n                edit: true,\n            };\n            // Add an empty options array if the dataset is list.\n            if (this.dataset === 'list') {\n                newCriterium.hasoptions = true;\n                newCriterium.options = [];\n            }\n            index.criteria.push(newCriterium);\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.criteriumId));\n            criterium.edit = true;\n            let newOptionId = 1;\n            let newSortOrder = 1;\n            if (criterium.options.length > 0) {\n                newOptionId = Math.max(...criterium.options.map((element) => element.optionid)) + 1;\n                newSortOrder = Math.max(...criterium.options.map((element) => element.sortorder)) + 1;\n            }\n            const newOption = {\n                optionid: newOptionId,\n                sortorder: newSortOrder,\n                title: '',\n                placeholder: await getString('newoption', 'mod_competvet'),\n            };\n            if (this.dataset === 'list') {\n                newOption.hasgrade = true;\n                newOption.grade = 0;\n            }\n            criterium.options.push(newOption);\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'grid') {\n            state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId)).deleted = true;\n        }\n        if (btn.dataset.type === 'criterium') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.criteriumId));\n            criterium.options.find((element) => element.optionid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        this.stopEdit(state);\n        if (btn.dataset.type === 'grid') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.id));\n            index.edit = true;\n        }\n        if (btn.dataset.type === 'criterium') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const criterium = index.criteria.find((element) => element.criteriumid === parseInt(btn.dataset.id));\n            criterium.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        state.grids.forEach((element) => {\n            element.edit = false;\n            element.criteria.forEach((element) => {\n                element.edit = false;\n            });\n        });\n        CompetState.setData(state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    async save() {\n        const state = CompetState.getData();\n        state.grids.forEach((element) => {\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.gridname = this.getValue('grid', 'gridname', element.gridid);\n            }\n            element.criteria.forEach((element) => {\n                if (element.edit && !element.deleted) {\n                    // Update the criterium with the new values from the UI.\n                    element.haschanged = true;\n                    element.title = this.getValue('criterium', 'title', element.criteriumid);\n                    if (!element.hasoptions) {\n                        return;\n                    }\n                    element.options.forEach((element) => {\n                        if (element.deleted) {\n                            return;\n                        }\n                        element.title = this.getValue('option', 'title', element.optionid);\n                        if (this.dataset === 'list') {\n                            element.grade = this.getValue('option', 'grade', element.optionid);\n                        }\n                    });\n                }\n            });\n        });\n        // Clone the state, remove the edit flags.\n        const saveState = {...state};\n        saveState.grids.forEach((element) => {\n            element.criteria.forEach((element) => {\n                element.edit = false;\n                delete element.placeholder;\n                if (!element.hasoptions) {\n                    return;\n                }\n                element.options.forEach((element) => {\n                    delete element.placeholder;\n                });\n            });\n        });\n        if (this.dataset === 'eval') {\n            await Repository.saveEvaluationCriteria(state);\n        } else if (this.dataset === 'list') {\n            await Repository.saveListCriteria(state);\n        } else if (this.dataset === 'certif') {\n            await Repository.saveCertificationCriteria(state);\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        // If the domNode is a div, it is a contenteditable field, return the innerHTML.\n        // If the domNode is an input, return the value.\n        return domNode.tagName === 'DIV' ? domNode.innerHTML : domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","sets","addEventListeners","getData","setNavigation","response","Repository","getEvaluationCriteria","getListCriteria","getCertificationCriteria","setData","context","setValue","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","stopEdit","delete","removeEdit","CompetState","grids","forEach","element","criteria","state","type","newGridId","newSortOrder","length","Math","max","map","gridid","sortorder","push","gridname","placeholder","index","find","parseInt","gridId","newGradeID","criteriumid","newCriterium","title","hasoptions","options","criterium","criteriumId","newOptionId","optionid","newOption","hasgrade","grade","deleted","id","haschanged","getValue","saveEvaluationCriteria","saveListCriteria","saveCertificationCriteria","property","domNode","tagName","innerHTML","value","init"],"mappings":"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"}