{"version":3,"file":"sortable.min.js","sources":["../../../src/local/manager/sortable.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Create a jquery sortable list.\n *\n * @module     mod_competvet/local/manager/sortable\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport \"jqueryui\";\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\n\nconst reOrderState = async(type, gridId, criterionId, order) => {\n    let state = CompetState.getValue('datatree');\n    if (type === 'criterion') {\n        state.grids.forEach((grid) => {\n            if (grid.gridid == gridId) {\n                grid.updatesortorder = true;\n                order.forEach((criterionId, index) => {\n                    grid.criteria.forEach((criterion) => {\n                        if (criterion.criterionid == criterionId) {\n                            criterion.sortorder = index;\n                        }\n                    });\n                    grid.criteria.sort((a, b) => {\n                        return a.sortorder - b.sortorder;\n                    });\n                });\n            }\n        });\n    }\n    if (type === 'option') {\n        state.grids.forEach((grid) => {\n            grid.criteria.forEach((criterion) => {\n                if (criterion.criterionid == criterionId) {\n                    criterion.updatesortorder = true;\n                    order.forEach((optionId, index) => {\n                        criterion.options.forEach((option) => {\n                            if (option.optionid == optionId) {\n                                option.sortorder = index;\n                            }\n                        });\n                    });\n                    // Now sort the options.\n                    criterion.options.sort((a, b) => {\n                        return a.sortorder - b.sortorder;\n                    });\n                }\n            });\n        });\n    }\n    CompetState.setValue('datatree', state);\n    const saveState = {\n        grids: [...state.grids],\n        type: CompetState.getValue('type'),\n    };\n    await Repository.saveCriteria(saveState);\n};\n\nconst sortable = (selector) => {\n    $(selector).sortable({\n        handle: '.drag-handle',\n        update: (event) => {\n            const type = $(event.target).data('type');\n            const gridId = $(event.target).data('gridId');\n            const criterionId = $(event.target).data('criterionId');\n            const order = $(event.target).sortable('toArray', {attribute: 'data-id'});\n            reOrderState(type, gridId, criterionId, order);\n        },\n    });\n};\n\nexport default {\n    sortable: sortable,\n};"],"names":["sortable","selector","handle","update","event","async","type","gridId","criterionId","order","state","CompetState","getValue","grids","forEach","grid","gridid","updatesortorder","index","criteria","criterion","criterionid","sortorder","sort","a","b","optionId","options","option","optionid","setValue","saveState","Repository","saveCriteria","reOrderState","target","data","attribute"],"mappings":";;;;;;;kPAwFe,CACXA,SAdcC,+BACZA,UAAUD,SAAS,CACjBE,OAAQ,eACRC,OAASC,QAlDIC,OAAMC,KAAMC,OAAQC,YAAaC,aAC9CC,MAAQC,qBAAYC,SAAS,YACpB,cAATN,MACAI,MAAMG,MAAMC,SAASC,OACbA,KAAKC,QAAUT,SACfQ,KAAKE,iBAAkB,EACvBR,MAAMK,SAAQ,CAACN,YAAaU,SACxBH,KAAKI,SAASL,SAASM,YACfA,UAAUC,aAAeb,cACzBY,UAAUE,UAAYJ,UAG9BH,KAAKI,SAASI,MAAK,CAACC,EAAGC,IACZD,EAAEF,UAAYG,EAAEH,mBAM9B,WAAThB,MACAI,MAAMG,MAAMC,SAASC,OACjBA,KAAKI,SAASL,SAASM,YACfA,UAAUC,aAAeb,cACzBY,UAAUH,iBAAkB,EAC5BR,MAAMK,SAAQ,CAACY,SAAUR,SACrBE,UAAUO,QAAQb,SAASc,SACnBA,OAAOC,UAAYH,WACnBE,OAAON,UAAYJ,aAK/BE,UAAUO,QAAQJ,MAAK,CAACC,EAAGC,IAChBD,EAAEF,UAAYG,EAAEH,wCAM/BQ,SAAS,WAAYpB,aAC3BqB,UAAY,CACdlB,MAAO,IAAIH,MAAMG,OACjBP,KAAMK,qBAAYC,SAAS,eAEzBoB,uBAAWC,aAAaF,YAWtBG,EAJa,mBAAE9B,MAAM+B,QAAQC,KAAK,SACnB,mBAAEhC,MAAM+B,QAAQC,KAAK,WAChB,mBAAEhC,MAAM+B,QAAQC,KAAK,gBAC3B,mBAAEhC,MAAM+B,QAAQnC,SAAS,UAAW,CAACqC,UAAW"}