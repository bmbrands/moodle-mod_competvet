{"version":3,"file":"manager_app_grading.min.js","sources":["../../../src/local/manager/manager_app_grading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_grading\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/grading2/competstate';\nimport Repository from 'mod_competvet/local/manager/repository';\nimport './grids';\n\n/* Example data structure:\n\n{\n    \"grids\": [\n        {\n            \"gridname\": \"YEAR2024\",\n            \"gridid\": 1,\n            \"grades\": [\n                {\n                    \"id\": 1,\n                    \"edit\": true,\n                    \"title\": \"Nombre et diversité des cas\",\n                    \"options\": [\n                        {\n                            \"id\": 1,\n                            \"title\": \"Le nombre de saisis par l'étudiant est insuffisant\",\n                            \"grade\": 0,\n                        },\n                        {\n                            \"id\": 2,\n                            \"title\": \"Le nombre de cas saisis par l'étudiant est suffisant\",\n                            \"grade\": 12.5,\n                        },\n                        {\n                            \"id\": 3,\n                            \"title\": \"Le nombre de cas saisis par l'étudiant est très satisfaisant\",\n                            \"grade\": 25,\n                        }\n                    ]\n\n                },\n                {\n                    \"id\": 2,\n                    \"title\": \"Qualité des cas\",\n                    \"options\": [\n                        {\n                            \"id\": 4,\n                            \"title\": \"La qualité des cas saisis par l'étudiant est insuffisante\",\n                            \"grade\": 0,\n                        },\n                        {\n                            \"id\": 5,\n                            \"title\": \"La qualité des cas saisis par l'étudiant est suffisante\",\n                            \"grade\": 12.5,\n                        },\n                        {\n                            \"id\": 6,\n                            \"title\": \"La qualité des cas saisis par l'étudiant est très satisfaisante\",\n                            \"grade\": 25,\n                        }\n                    ]\n                }\n            ]\n        },\n    ]\n}\n*/\n\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"grading\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.dataset = this.app.region;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getGradingData(this.cmId);\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n    }\n\n    removeEdit() {\n        let state = CompetState.getData();\n        state.grids.forEach((element) => {\n            element.grades.forEach((element) => {\n                element.edit = false;\n            });\n        });\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    add(btn) {\n        this.save();\n        let state = CompetState.getData();\n\n        if (btn.dataset.type === 'grid') {\n            state.grids.push({\n                categorytext: 'New Grid',\n                gridid: 0,\n                grades: [],\n            });\n        }\n        if (btn.dataset.type === 'grade') {\n            this.removeEdit();\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            let newGradeID = 1;\n            let newSortOrder = 1;\n            if (index.grades.length > 0) {\n                newGradeID = Math.max(...index.grades.map((element) => element.gradeid)) + 1;\n                newSortOrder = Math.max(...index.grades.map((element) => element.sortorder)) + 1;\n            }\n            index.grades.push({\n                gradeid: newGradeID,\n                sortorder: newSortOrder,\n                title: 'New Grade',\n                edit: true,\n                options: [],\n            });\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const grade = index.grades.find((element) => element.gradeid === parseInt(btn.dataset.gradeId));\n            let newOptionId = 1;\n            let newSortOrder = 1;\n            if (grade.options.length > 0) {\n                newOptionId = Math.max(...grade.options.map((element) => element.optionid)) + 1;\n                newSortOrder = Math.max(...grade.options.map((element) => element.sortorder)) + 1;\n            }\n            grade.options.push({\n                optionid: newOptionId,\n                sortorder: newSortOrder,\n                title: 'New Option',\n                grade: 0,\n            });\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'grid') {\n            state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId)).deleted = true;\n        }\n        if (btn.dataset.type === 'grade') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            index.grades.find((element) => element.gradeid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        if (btn.dataset.type === 'option') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const grade = index.grades.find((element) => element.gradeid === parseInt(btn.dataset.gradeId));\n            grade.options.find((element) => element.optionid === parseInt(btn.dataset.id)).deleted = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        this.stopEdit(state);\n        if (btn.dataset.type === 'grid') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.id));\n            index.edit = true;\n        }\n        if (btn.dataset.type === 'grade') {\n            const index = state.grids.find((element) => element.gridid === parseInt(btn.dataset.gridId));\n            const grade = index.grades.find((element) => element.gradeid === parseInt(btn.dataset.id));\n            grade.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        state.grids.forEach((element) => {\n            element.edit = false;\n            element.grades.forEach((element) => {\n                element.edit = false;\n            });\n        });\n        CompetState.setData(state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    save() {\n        const state = CompetState.getData();\n        state.grids.forEach((element) => {\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.gridname = this.getValue('grid', 'gridname', element.gridid);\n            }\n            element.grades.forEach((element) => {\n                if (element.edit) {\n                    // Update the grade with the new values from the UI.\n                    element.haschanged = true;\n                    element.title = this.getValue('grade', 'title', element.gradeid);\n                    element.options.forEach((element) => {\n                        element.title = this.getValue('option', 'title', element.optionid);\n                        element.grade = this.getValue('option', 'grade', element.optionid);\n                    });\n                }\n            });\n        });\n        CompetState.setData(state);\n        Repository.saveGradingData(state);\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        // If the domNode is a div, it is a contenteditable field, return the innerHTML.\n        // If the domNode is an input, return the value.\n        return domNode.tagName === 'DIV' ? domNode.innerHTML : domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","region","addEventListeners","getData","response","Repository","getGradingData","setData","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","stopEdit","delete","removeEdit","CompetState","grids","forEach","element","grades","state","type","push","categorytext","gridid","index","find","parseInt","gridId","newGradeID","newSortOrder","length","Math","max","map","gradeid","sortorder","title","options","grade","gradeId","newOptionId","optionid","deleted","id","haschanged","gridname","getValue","saveGradingData","property","domNode","tagName","innerHTML","value","init"],"mappings":"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"}