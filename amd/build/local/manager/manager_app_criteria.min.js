define("mod_competvet/local/manager/manager_app_criteria",["exports","mod_competvet/local/competstate","mod_competvet/local/new-repository","core/str","./grids"],(function(_exports,_competstate,_newRepository,_str,_grids){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Moves wrapping navigation items into a more menu.
   *
   * @module     mod_competvet/local/manager/manager_app_grading
   * @class      competvet
   * @copyright  2024 Bas Brands
   * @author     Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_competstate=_interopRequireDefault(_competstate),_newRepository=_interopRequireDefault(_newRepository);class Manager{constructor(){this.app=document.querySelector('[data-region="criteria"]'),this.cmId=this.app.dataset.cmId,this.dataset=this.app.region,this.addEventListeners(),this.getData()}async getData(){const response=await _newRepository.default.getListCriteria(this.cmId);response&&_competstate.default.setData(response)}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),this.app.classList.add("jsenabled")}actions(btn){"add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action&&(this.stopEdit(),this.save()),"delete"===btn.dataset.action&&this.delete(btn)}removeEdit(){_competstate.default.getData().grids.forEach((element=>{element.criteria.forEach((element=>{element.edit=!1}))}))}async add(btn){this.save();let state=_competstate.default.getData();if("grid"===btn.dataset.type&&state.grids.push({categorytext:"",placeholder:await(0,_str.get_string)("newgrid","mod_competvet"),gridid:0,criteria:[]}),"criterium"===btn.dataset.type){this.removeEdit();const index=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId)));let newGradeID=1,newSortOrder=1;index.criteria.length>0&&(newGradeID=Math.max(...index.criteria.map((element=>element.criteriumid)))+1,newSortOrder=Math.max(...index.criteria.map((element=>element.sortorder)))+1),index.criteria.push({criteriumid:newGradeID,sortorder:newSortOrder,title:"",placeholder:await(0,_str.get_string)("newcriterium","mod_competvet"),edit:!0,options:[]})}if("option"===btn.dataset.type){const criterium=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criteriumid===parseInt(btn.dataset.criteriumId)));let newOptionId=1,newSortOrder=1;criterium.options.length>0&&(newOptionId=Math.max(...criterium.options.map((element=>element.optionid)))+1,newSortOrder=Math.max(...criterium.options.map((element=>element.sortorder)))+1),criterium.options.push({optionid:newOptionId,sortorder:newSortOrder,title:"",placeholder:await(0,_str.get_string)("newoption","mod_competvet"),grade:0})}_competstate.default.setData(state)}delete(btn){let state=_competstate.default.getData();if("grid"===btn.dataset.type&&(state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).deleted=!0),"criterium"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criteriumid===parseInt(btn.dataset.id))).deleted=!0}if("option"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criteriumid===parseInt(btn.dataset.criteriumId))).options.find((element=>element.optionid===parseInt(btn.dataset.id))).deleted=!0}_competstate.default.setData(state)}edit(btn){const state=_competstate.default.getData();if(this.stopEdit(state),"grid"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.id))).edit=!0}if("criterium"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criteriumid===parseInt(btn.dataset.id))).edit=!0}_competstate.default.setData(state)}stopEdit(){const state=_competstate.default.getData();state.grids.forEach((element=>{element.edit=!1,element.criteria.forEach((element=>{element.edit=!1}))})),_competstate.default.setData(state)}async save(){const state=_competstate.default.getData();state.grids.forEach((element=>{element.edit&&(element.haschanged=!0,element.gridname=this.getValue("grid","gridname",element.gridid)),element.criteria.forEach((element=>{element.edit&&!element.deleted&&(element.haschanged=!0,element.title=this.getValue("criterium","title",element.criteriumid),element.options.forEach((element=>{element.deleted||(element.title=this.getValue("option","title",element.optionid),element.grade=this.getValue("option","grade",element.optionid))})))}))})),await _newRepository.default.saveListCriteria(state),_competstate.default.setData(state)}getValue(element,property,id){const domNode=this.app.querySelector('[data-region="'.concat(element,'"][data-id="').concat(id,'"] [data-field="').concat(property,'"]'));return"DIV"===domNode.tagName?domNode.innerHTML:domNode.value}}var _default={init:()=>{new Manager}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager_app_criteria.min.js.map