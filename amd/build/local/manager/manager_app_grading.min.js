define("mod_competvet/local/manager/manager_app_grading",["exports","mod_competvet/local/grading2/competstate","mod_competvet/local/manager/repository","./grids"],(function(_exports,_competstate,_repository,_grids){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Moves wrapping navigation items into a more menu.
   *
   * @module     mod_competvet/local/manager/manager_app_grading
   * @class      competvet
   * @copyright  2024 Bas Brands
   * @author     Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_competstate=_interopRequireDefault(_competstate),_repository=_interopRequireDefault(_repository);class Manager{constructor(){this.app=document.querySelector('[data-region="grading"]'),this.cmId=this.app.dataset.cmId,this.dataset=this.app.region,this.addEventListeners(),this.getData()}async getData(){const response=await _repository.default.getGradingData(this.cmId);response&&_competstate.default.setData(response)}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),this.app.classList.add("jsenabled")}actions(btn){"add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action&&(this.save(),this.stopEdit()),"delete"===btn.dataset.action&&this.delete(btn)}removeEdit(){_competstate.default.getData().grids.forEach((element=>{element.grades.forEach((element=>{element.edit=!1}))}))}add(btn){this.save();let state=_competstate.default.getData();if("grid"===btn.dataset.type&&state.grids.push({categorytext:"New Grid",gridid:0,grades:[]}),"grade"===btn.dataset.type){this.removeEdit();const index=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId)));let newGradeID=1,newSortOrder=1;index.grades.length>0&&(newGradeID=Math.max(...index.grades.map((element=>element.gradeid)))+1,newSortOrder=Math.max(...index.grades.map((element=>element.sortorder)))+1),index.grades.push({gradeid:newGradeID,sortorder:newSortOrder,title:"New Grade",edit:!0,options:[]})}if("option"===btn.dataset.type){const grade=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).grades.find((element=>element.gradeid===parseInt(btn.dataset.gradeId)));let newOptionId=1,newSortOrder=1;grade.options.length>0&&(newOptionId=Math.max(...grade.options.map((element=>element.optionid)))+1,newSortOrder=Math.max(...grade.options.map((element=>element.sortorder)))+1),grade.options.push({optionid:newOptionId,sortorder:newSortOrder,title:"New Option",grade:0})}_competstate.default.setData(state)}delete(btn){let state=_competstate.default.getData();if("grid"===btn.dataset.type&&(state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).deleted=!0),"grade"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).grades.find((element=>element.gradeid===parseInt(btn.dataset.id))).deleted=!0}if("option"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).grades.find((element=>element.gradeid===parseInt(btn.dataset.gradeId))).options.find((element=>element.optionid===parseInt(btn.dataset.id))).deleted=!0}_competstate.default.setData(state)}edit(btn){const state=_competstate.default.getData();if(this.stopEdit(state),"grid"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.id))).edit=!0}if("grade"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).grades.find((element=>element.gradeid===parseInt(btn.dataset.id))).edit=!0}_competstate.default.setData(state)}stopEdit(){const state=_competstate.default.getData();state.grids.forEach((element=>{element.edit=!1,element.grades.forEach((element=>{element.edit=!1}))})),_competstate.default.setData(state)}save(){const state=_competstate.default.getData();state.grids.forEach((element=>{element.edit&&(element.haschanged=!0,element.gridname=this.getValue("grid","gridname",element.gridid)),element.grades.forEach((element=>{element.edit&&(element.haschanged=!0,element.title=this.getValue("grade","title",element.gradeid),element.options.forEach((element=>{element.title=this.getValue("option","title",element.optionid),element.grade=this.getValue("option","grade",element.optionid)})))}))})),_competstate.default.setData(state),_repository.default.saveGradingData(state)}getValue(element,property,id){const domNode=this.app.querySelector('[data-region="'.concat(element,'"][data-id="').concat(id,'"] [data-field="').concat(property,'"]'));return"DIV"===domNode.tagName?domNode.innerHTML:domNode.value}}var _default={init:()=>{new Manager}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager_app_grading.min.js.map