{"version":3,"file":"manager_app_planning.min.js","sources":["../../../src/local/manager/manager_app_planning.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_planning\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport './plannings';\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"planning\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.dataset = this.app.region;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getPlannings(this.cmId);\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    add(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            let newPlanningId = 1;\n            if (state.plannings.length > 0) {\n                newPlanningId = Math.max(...state.plannings.map((element) => element.id)) + 1;\n            }\n\n            state.plannings.push({\n                id: newPlanningId,\n                startdate: '',\n                enddate: '',\n                groupname: '',\n                session: '',\n                edit: true,\n            });\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            state.plannings = state.plannings.filter((element) => element.id !== parseInt(btn.dataset.id));\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        let state = CompetState.getData();\n        // Remove edit from all fields.\n        state.plannings.forEach((element) => {\n            element.edit = false;\n        });\n        if (btn.dataset.type === 'planning') {\n            let planning = state.plannings.find((element) => element.id === parseInt(btn.dataset.id));\n            planning.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        state.plannings.forEach((element) => {\n            element.edit = false;\n        });\n        CompetState.setData(state);\n    }\n\n    update() {\n        const state = CompetState.getData();\n        state.plannings.forEach((element) => {\n            element.haschanged = false;\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.startdate = this.getValue('planitem', 'startdate', element.id);\n                element.enddate = this.getValue('planitem', 'enddate', element.id);\n                element.groupname = this.getValue('planitem', 'groupname', element.id);\n                element.session = this.getValue('planitem', 'session', element.id);\n            }\n        });\n        CompetState.setData(state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    async save() {\n        this.update();\n        const state = CompetState.getData();\n        const saveState = {\n            plannings: [],\n        };\n        if (state.plannings.length > 0) {\n            saveState.plannings = [...state.plannings];\n        }\n        saveState.plannings.forEach((element) => {\n            delete element.edit;\n            delete element.placeholder;\n        });\n        await Repository.savePlannings(saveState);\n        this.getData();\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        if (!domNode) {\n            window.console.log(`Element not found: ${element} ${property} ${id}`);\n            const element = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"]`);\n            if (!element) {\n                window.console.log(`Element not found: ${element} ${id}`);\n                return '';\n            }\n        }\n        return domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","region","addEventListeners","getData","response","Repository","getPlannings","setData","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","stopEdit","delete","state","CompetState","type","newPlanningId","plannings","length","Math","max","map","element","id","push","startdate","enddate","groupname","session","filter","parseInt","forEach","find","update","haschanged","getValue","saveState","placeholder","savePlannings","property","domNode","window","console","log","value","init"],"mappings":";;;;;;;;;mMA+BMA,QAKFC,mBACSC,IAAMC,SAASC,cAAc,iCAC7BC,KAAOC,KAAKJ,IAAIK,QAAQF,UACxBE,QAAUD,KAAKJ,IAAIM,YACnBC,yBACAC,gCAOCC,eAAiBC,uBAAWC,aAAaP,KAAKD,MAC/CM,+BAGOG,QAAQH,UAOxBF,oBACIN,SAASY,iBAAiB,SAAUC,QAC5BC,IAAMD,EAAEE,OAAOC,QAAQ,iBACvBF,MACAD,EAAEI,sBACGC,QAAQJ,cAGhBf,IAAIoB,UAAUC,IAAI,aAO3BF,QAAQJ,KACuB,QAAvBA,IAAIV,QAAQiB,aACPD,IAAIN,KAEc,SAAvBA,IAAIV,QAAQiB,aACPC,KAAKR,KAEa,SAAvBA,IAAIV,QAAQiB,cACPE,YACAC,YAEkB,WAAvBV,IAAIV,QAAQiB,aACPI,OAAOX,KAQpBM,IAAIN,SACIY,MAAQC,qBAAYpB,aACC,aAArBO,IAAIV,QAAQwB,KAAqB,KAC7BC,cAAgB,EAChBH,MAAMI,UAAUC,OAAS,IACzBF,cAAgBG,KAAKC,OAAOP,MAAMI,UAAUI,KAAKC,SAAYA,QAAQC,MAAO,GAGhFV,MAAMI,UAAUO,KAAK,CACjBD,GAAIP,cACJS,UAAW,GACXC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTnB,MAAM,yBAGFX,QAAQe,OAOxBD,OAAOX,SACCY,MAAQC,qBAAYpB,UACC,aAArBO,IAAIV,QAAQwB,OACZF,MAAMI,UAAYJ,MAAMI,UAAUY,QAAQP,SAAYA,QAAQC,KAAOO,SAAS7B,IAAIV,QAAQgC,4BAElFzB,QAAQe,OAQxBJ,KAAKR,SACGY,MAAQC,qBAAYpB,aAExBmB,MAAMI,UAAUc,SAAST,UACrBA,QAAQb,MAAO,KAEM,aAArBR,IAAIV,QAAQwB,KAAqB,CAClBF,MAAMI,UAAUe,MAAMV,SAAYA,QAAQC,KAAOO,SAAS7B,IAAIV,QAAQgC,MAC5Ed,MAAO,uBAERX,QAAQe,OAMxBF,iBACUE,MAAQC,qBAAYpB,UAE1BmB,MAAMI,UAAUc,SAAST,UACrBA,QAAQb,MAAO,0BAEPX,QAAQe,OAGxBoB,eACUpB,MAAQC,qBAAYpB,UAC1BmB,MAAMI,UAAUc,SAAST,UACrBA,QAAQY,YAAa,EACjBZ,QAAQb,OAERa,QAAQY,YAAa,EACrBZ,QAAQG,UAAYnC,KAAK6C,SAAS,WAAY,YAAab,QAAQC,IACnED,QAAQI,QAAUpC,KAAK6C,SAAS,WAAY,UAAWb,QAAQC,IAC/DD,QAAQK,UAAYrC,KAAK6C,SAAS,WAAY,YAAab,QAAQC,IACnED,QAAQM,QAAUtC,KAAK6C,SAAS,WAAY,UAAWb,QAAQC,6BAG3DzB,QAAQe,yBAOfoB,eACCpB,MAAQC,qBAAYpB,UACpB0C,UAAY,CACdnB,UAAW,IAEXJ,MAAMI,UAAUC,OAAS,IACzBkB,UAAUnB,UAAY,IAAIJ,MAAMI,YAEpCmB,UAAUnB,UAAUc,SAAST,iBAClBA,QAAQb,YACRa,QAAQe,qBAEbzC,uBAAW0C,cAAcF,gBAC1B1C,UAUTyC,SAASb,QAASiB,SAAUhB,UAClBiB,QAAUlD,KAAKJ,IAAIE,sCAA+BkC,+BAAsBC,8BAAqBgB,oBAC9FC,QAAS,CACVC,OAAOC,QAAQC,iCAA0BrB,oBAAWiB,qBAAYhB,WAC1DD,QAAUhC,KAAKJ,IAAIE,sCAA+BkC,+BAAsBC,cACzED,eACDmB,OAAOC,QAAQC,iCAA0BrB,oBAAWC,KAC7C,UAGRiB,QAAQI,oBAYR,CACXC,KALS,SACL7D"}