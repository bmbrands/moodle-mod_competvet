{"version":3,"file":"manager_app_planning.min.js","sources":["../../../src/local/manager/manager_app_planning.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_planning\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport './plannings';\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"planning\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.dataset = this.app.region;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getPlannings(this.cmId);\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    add(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            let newPlanningId = 1;\n            if (state.plannings.length > 0) {\n                newPlanningId = Math.max(...state.plannings.map((element) => element.id)) + 1;\n            }\n\n            state.plannings.push({\n                id: newPlanningId,\n                startdate: '',\n                enddate: '',\n                groupname: '',\n                edit: true,\n            });\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            state.plannings = state.plannings.filter((element) => element.id !== parseInt(btn.dataset.id));\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        let state = CompetState.getData();\n        // Remove edit from all fields.\n        state.plannings.forEach((element) => {\n            element.edit = false;\n        });\n        if (btn.dataset.type === 'planning') {\n            let planning = state.plannings.find((element) => element.id === parseInt(btn.dataset.id));\n            planning.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Save the state to the server.\n     */\n    save() {\n        const state = CompetState.getData();\n        Repository.saveData(state);\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","region","addEventListeners","getData","response","Repository","getPlannings","setData","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","delete","state","CompetState","type","newPlanningId","plannings","length","Math","max","map","element","id","push","startdate","enddate","groupname","filter","parseInt","forEach","find","saveData","init"],"mappings":";;;;;;;;;mMA+BMA,QAKFC,mBACSC,IAAMC,SAASC,cAAc,iCAC7BC,KAAOC,KAAKJ,IAAIK,QAAQF,UACxBE,QAAUD,KAAKJ,IAAIM,YACnBC,yBACAC,gCAOCC,eAAiBC,uBAAWC,aAAaP,KAAKD,MAC/CM,+BAGOG,QAAQH,UAOxBF,oBACIN,SAASY,iBAAiB,SAAUC,QAC5BC,IAAMD,EAAEE,OAAOC,QAAQ,iBACvBF,MACAD,EAAEI,sBACGC,QAAQJ,cAGhBf,IAAIoB,UAAUC,IAAI,aAO3BF,QAAQJ,KACuB,QAAvBA,IAAIV,QAAQiB,aACPD,IAAIN,KAEc,SAAvBA,IAAIV,QAAQiB,aACPC,KAAKR,KAEa,SAAvBA,IAAIV,QAAQiB,aACPE,OAEkB,WAAvBT,IAAIV,QAAQiB,aACPG,OAAOV,KAQpBM,IAAIN,SACIW,MAAQC,qBAAYnB,aACC,aAArBO,IAAIV,QAAQuB,KAAqB,KAC7BC,cAAgB,EAChBH,MAAMI,UAAUC,OAAS,IACzBF,cAAgBG,KAAKC,OAAOP,MAAMI,UAAUI,KAAKC,SAAYA,QAAQC,MAAO,GAGhFV,MAAMI,UAAUO,KAAK,CACjBD,GAAIP,cACJS,UAAW,GACXC,QAAS,GACTC,UAAW,GACXjB,MAAM,yBAGFX,QAAQc,OAOxBD,OAAOV,SACCW,MAAQC,qBAAYnB,UACC,aAArBO,IAAIV,QAAQuB,OACZF,MAAMI,UAAYJ,MAAMI,UAAUW,QAAQN,SAAYA,QAAQC,KAAOM,SAAS3B,IAAIV,QAAQ+B,4BAElFxB,QAAQc,OAQxBH,KAAKR,SACGW,MAAQC,qBAAYnB,aAExBkB,MAAMI,UAAUa,SAASR,UACrBA,QAAQZ,MAAO,KAEM,aAArBR,IAAIV,QAAQuB,KAAqB,CAClBF,MAAMI,UAAUc,MAAMT,SAAYA,QAAQC,KAAOM,SAAS3B,IAAIV,QAAQ+B,MAC5Eb,MAAO,uBAERX,QAAQc,OAMxBF,aACUE,MAAQC,qBAAYnB,iCACfqC,SAASnB,qBAYb,CACXoB,KALS,SACLhD"}